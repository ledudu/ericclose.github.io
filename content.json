{"meta":{"title":"Eric","subtitle":"","description":"Never give up!","author":"Eric","url":"https://ericclose.github.io","root":"/"},"pages":[{"title":"所有分类","date":"2020-09-29T09:54:29.502Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"categories/index.html","permalink":"https://ericclose.github.io/categories/","excerpt":"","text":""},{"title":"","date":"2020-09-29T09:54:29.487Z","updated":"2020-09-29T09:54:29.487Z","comments":true,"path":"404.html","permalink":"https://ericclose.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-09-29T09:54:29.502Z","updated":"2020-09-29T09:54:29.502Z","comments":false,"path":"test/index.html","permalink":"https://ericclose.github.io/test/","excerpt":"","text":"测试 bilibili YouTube"},{"title":"","date":"2020-09-29T09:54:29.502Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"about/index.html","permalink":"https://ericclose.github.io/about/","excerpt":"","text":"Eric 关于本人我是一个网瘾少年，有事没事都喜欢坐在电脑桌前玩电脑。性格内向，不善言辞，与大多数同龄人格格不入。以下是关于我的个人说明： 社交应用：主要使用telegram。也有玩qq，微信（但是对二者并无任何好感） 游戏：不怎么玩游戏，比较难以接受手游 影视：比较偏向科幻电影，但不喜欢超级英雄类的电影。对抖音快手等短视频应用有较为强烈的反感 音乐：比较喜欢轻柔的音乐，也喜欢古风。 阅读：大量地碎片化阅读，主要使用RSS阅读器获取资讯，平时没有阅读书籍的习惯。 饮食：嗜盐如命，也喜欢吃辣的。不大喜欢甜食，但是对蛋糕有所偏爱。 宗教信仰：坚定的无神论者。不敬鬼神，但从世俗的角度来看，我依然尊重持有宗教信仰的他人。对宗教信仰的理解，一句话就是：无非就是一种自我的心灵慰籍罢了 政治观点：没有系统的了解过政治，但是至少持有这种观点：不论是实行何种社会体制，我都无法接受政府（不透明的、不加节制的）进行网络、言论、思想方面的审查。"},{"title":"","date":"2020-09-29T09:54:29.502Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"friends/index.html","permalink":"https://ericclose.github.io/friends/","excerpt":"友链","text":"友链 留言规范友链要求各位大佬想交换友链的话可以在下方留言哦～ 12345- title: Eric avatar: https://cdn.jsdelivr.net/gh/ericclose/cdn-assets/img/avatar.jpeg url: https://ericclose.github.io keywords: [计算机, 萌新] description: To be completed... 注解 title 名字 avatar 头像链接 url 博客链接 keywords 标签 description 描述 这里没啥严格的加友链的要求啦，和我混个眼熟就可以来找我互加友链哟。"},{"title":"所有标签","date":"2020-09-29T09:54:29.502Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"tags/index.html","permalink":"https://ericclose.github.io/tags/","excerpt":"","text":""}],"posts":[{"title":"更改 Pixel / Pixel XL 的 modem 以支持中国电信","slug":"Pixel-modem-mod-for-China-Telecom","date":"2020-08-19T08:13:51.000Z","updated":"2020-09-29T09:54:29.487Z","comments":true,"path":"Pixel-modem-mod-for-China-Telecom.html","link":"","permalink":"https://ericclose.github.io/Pixel-modem-mod-for-China-Telecom.html","excerpt":"❗️ 注意：本教程仅适用于 Google Pixel (2016) 或 Google Pixel XL (2016)，其他更新的机型并不适用。 高通现代的 SoC 理论上应该是支持众多 LTE 的频段，而很多针对中国大陆境外销售的手机可能对境内的运营商网络支持不够友好。Google Pixel 对于中国电信的支持情况就是一个例子，为了使中国电信能够在 Google Pixel 上正常使用，本教程教会告诉你如何通过非硬件层面上的方法（通过修改 modem ）来实现这一目的。","text":"❗️ 注意：本教程仅适用于 Google Pixel (2016) 或 Google Pixel XL (2016)，其他更新的机型并不适用。 高通现代的 SoC 理论上应该是支持众多 LTE 的频段，而很多针对中国大陆境外销售的手机可能对境内的运营商网络支持不够友好。Google Pixel 对于中国电信的支持情况就是一个例子，为了使中国电信能够在 Google Pixel 上正常使用，本教程教会告诉你如何通过非硬件层面上的方法（通过修改 modem ）来实现这一目的。 基本要求为了能够正常完成本次操作，你首先需要确保以下内容： 配置好 ADB 的环境变量 不懂的话就请网上自行搜索“ADB 环境变量”，本文不会讲解这一基本操作（敬请见谅 知道如何进入 bootloader 模式 bootloader 模式：在设备关机的情况下，长按 音量-键 + 电源键 ，进入如下界面即可。 知道如何进入 recovery 模式 recovery 模式：①.在设备处于 bootloader 模式的情况下，通过 音量+键 或 音量-键 更换菜单选项，直到显示 Recovery mode ,然后 按 电源键 确认；②.随后手机会出现 No command 的界面；③.然后这时长按 电源键 ，3 秒后（电源键依然不要松），按一下 音量+键 （只要按一下就松开音量键），手机就会显示出 recovery 的功能菜单，如下第 3 张图所示。 确保已解锁 bootloader 关于解锁 bootloader 的操作可以看我上篇的文章的一个小节：确认是否可以解锁 bootloaderhttps://ericclose.github.io/Pixel-repairs-and-carriers.html#%E7%A1%AE%E8%AE%A4%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%A7%A3%E9%94%81-bootloader如果很不幸你的 Pixel 是 Verizon 版的就只能找某宝奸商付费解锁 bootloader 了。 ❗️ 注意：如果你不想或没空自己移植 modem，请直接跳过过下面 移植 modem 的环节（之后直接按教程刷入移植得到的 modem.img 即可）： 点击跳过“移植 modem”环节 移植 modem ❗️ 注意：由于 Google Pixel 和 Google Pixel XL 使用的是相同的 modem（通过二者 modem.img 的 sha256sum 值相同得出的结论），所以通过修改得到的 modem 文件是通用的。 刷入最新的 factory image本教程是基于 Pixel 的最后一个系统版本修改 modem，所以请确保你的 Pixel 系统已是最新。factory image，即工厂镜像，通俗来说也就是所谓的“线刷包”。请根据你所持有的设备下载相应的工厂镜像： 设备 工厂镜像下载链接 Pixel sailfish-qp1a.191005.007.a3-factory-d4552659.zip Pixel XL marlin-qp1a.191005.007.a3-factory-bef66533.zip 将手机重启到 bootloader 模式 解压下载好的工厂镜像 找到 flash-all.bat 文件，双击即可 完成后手机会自动重启 备份 Pixel / Pixel XL 的 modem由于 Pixel /Pixel XL 的 Android 10 工厂镜像没有提供单独的 modem.img ，所以我们需要通过 TWRP（第三方 recovery）执行 dd 命令来实现对 modem 的备份。 设备 TWRP 下载链接 Pixel twrp-3.4.0-0-sailfish.img Pixel XL twrp-3.4.0-0-marlin.img 首先根据你所持有的设备下载好相应的 TWRP 将手机重启到 bootloader 模式 启动到 TWRP，即执行命令： 1fastboot boot *.img 命令里的 *.img 不需要手动输入，直接拖拽文件到 cmd 窗口即可，系统会自动填写文件相应的路径。如图： 最后，备份 modem 执行命令如下： 1234adb shelldd if=/dev/block/bootdevice/by-name/modem_a of=/sdcard/stock.imgexitadb pull /sdcard/stock.img F:\\Downloads 命令里的 F:\\Downloads 是备份的 modem （即 stock.img ）存储在电脑上的路径，你可以自行修改，看图： 获取 OnePlus 3T 的 modem更改基带文件的总体思路是：提取相同型号处理器的设备的基带文件（这里使用的是 OnePlus 3T)。为了得到 OnePlus 的 modem，所以我们需要 OnePlus 的工厂镜像来提取 modem。 设备 工厂镜像下载链接 OnePlus 3T OnePlus3THydrogen_28_OTA_083_all_2002201900_bf0fc8385b5547c0.zip 首先下载 OnePlus 3T 的工厂镜像 从工厂镜像压缩包找到 /firmware-update/NON-HLOS.bin ，提取出来即可 移植 modem经过前期的准备工作，我们得到了 Pixel / Pixel XL 的 modem 镜像 stock.img OnePlus 3T 的 modem 镜像 NON-HLOS.bin 文件名 下载链接 stock.img 链接 NON-HLOS.bin 链接 通过挂载 modem 镜像，我们可以对镜像里的文件进行修改，为了接下来的操作，我们这里需要用到搭载 Linux 系统 的电脑或虚拟机。以下命令均在 Linux 上运行： 12345678910111213141516# 1. 创建挂载点（stock 用于挂载 Pixel 的原始 modem 镜像，oneplus 用于挂载 OnePlus 的 modem 镜像）mkdir stock oneplus# 2. 分别挂载 Pixel 和 OnePlus 的镜像，挂载到相应挂载点上sudo mount -o loop stock.img stock &amp;&amp; sudo mount -o loop NON-HLOS.bin oneplus# 3. 创建目录sudo mkdir stock/modem_pr/mcfg/configs/mcfg_sw/generic/china# 4. 复制文件sudo cp -r oneplus/image/modem_pr/mcfg/configs/mcfg_sw/generic/china/ct stock/modem_pr/mcfg/configs/mcfg_sw/generic/china/# 5. ❗️ 注意：使用 vim （或其他编辑器）编辑文件，将文件中的数字加 1sudo vim stock/modem_pr/verinfo/ver_info.txt # 6. 同步sudo sync# 7. 从各自的挂载点卸载sudo umount stock oneplus# 8. 重命名 stock.img 为 modem.img mv stock.img modem.img 完成上述命令后我们就移植得到了 modem.img 啦。 下载移植得到的 modem 镜像你可以使用自己移植得到的 modem 镜像（ modem.img ），或者是下载本文提供的镜像： 文件名 下载链接 modem.img 链接 刷入 modem手机进入 bootloader 模式，刷入 modem 镜像（ modem.img ），cmd 执行这行命令即可： 1fastboot --slot all flash modem *.img 命令里的 *.img 不需要手动输入，直接拖拽文件到 cmd 窗口即可，系统会自动填写文件相应的路径。如图： ❗️ 注意：刷入 modem 后必须恢复出厂设置，之后重启即可，执行以下命令： 123fastboot erase userdatafastboot erase frpfastboot reboot 网络去叉状态栏的网络信号有个叉，这是为什么呢，又该如何解决？详情请参见： （类）原生 Android 网络去叉／叹号 Android 5.0 - 10.0","categories":[{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/categories/Android/"}],"tags":[{"name":"Google","slug":"Google","permalink":"https://ericclose.github.io/tags/Google/"},{"name":"破解","slug":"破解","permalink":"https://ericclose.github.io/tags/%E7%A0%B4%E8%A7%A3/"},{"name":"pixel","slug":"pixel","permalink":"https://ericclose.github.io/tags/pixel/"},{"name":"Pixel XL","slug":"Pixel-XL","permalink":"https://ericclose.github.io/tags/Pixel-XL/"},{"name":"sailfish","slug":"sailfish","permalink":"https://ericclose.github.io/tags/sailfish/"},{"name":"modem","slug":"modem","permalink":"https://ericclose.github.io/tags/modem/"},{"name":"电信","slug":"电信","permalink":"https://ericclose.github.io/tags/%E7%94%B5%E4%BF%A1/"},{"name":"运营商","slug":"运营商","permalink":"https://ericclose.github.io/tags/%E8%BF%90%E8%90%A5%E5%95%86/"},{"name":"crack","slug":"crack","permalink":"https://ericclose.github.io/tags/crack/"},{"name":"移植","slug":"移植","permalink":"https://ericclose.github.io/tags/%E7%A7%BB%E6%A4%8D/"}]},{"title":"查询 Google Pixel 保修信息以及判断是否为 Verizon （运营商） 版","slug":"Pixel-repairs-and-carriers","date":"2020-07-29T09:53:51.000Z","updated":"2020-10-23T13:01:09.695Z","comments":true,"path":"Pixel-repairs-and-carriers.html","link":"","permalink":"https://ericclose.github.io/Pixel-repairs-and-carriers.html","excerpt":"如果你想了解关于运营商版和无锁版 Pixel 的不同点，你可以展开下列内容看看： 运营商版 Pixel 的相关资料 根据你购买手机的区域，你可能需要解锁你的 Google Pixel 来切换运营商网络。所有通过 Google Store 购买的 Pixel 都会自动解锁，所以你不必考虑解锁运营商网络的问题——你可以自由地使用任一运营商。对于那些通过特定运营商或其他零售商购买 Pixel 的人，SIM 卡最长可能被锁定 2 年。在这种情况下，除非销售商解锁 SIM 卡或合约到期，否则手机只能使用该服务提供商提供的移动服务。如果您想在销售合约到期前解锁手机的 SIM 卡，请与您的移动服务提供商联系，以商讨可行的方案。“开发者选项”中的“OEM 解锁”选项，无法在 Verizon 版的 Pixel 机型上启用。 Verizon 版 Pixel 的 bootloader 经过加密无法解锁。资料来源：搭配任意移动网络使用 Pixel 手机How to unlock a Google Pixel phone, so you can switch carrier networks","text":"如果你想了解关于运营商版和无锁版 Pixel 的不同点，你可以展开下列内容看看： 运营商版 Pixel 的相关资料 根据你购买手机的区域，你可能需要解锁你的 Google Pixel 来切换运营商网络。所有通过 Google Store 购买的 Pixel 都会自动解锁，所以你不必考虑解锁运营商网络的问题——你可以自由地使用任一运营商。对于那些通过特定运营商或其他零售商购买 Pixel 的人，SIM 卡最长可能被锁定 2 年。在这种情况下，除非销售商解锁 SIM 卡或合约到期，否则手机只能使用该服务提供商提供的移动服务。如果您想在销售合约到期前解锁手机的 SIM 卡，请与您的移动服务提供商联系，以商讨可行的方案。“开发者选项”中的“OEM 解锁”选项，无法在 Verizon 版的 Pixel 机型上启用。 Verizon 版 Pixel 的 bootloader 经过加密无法解锁。资料来源：搭配任意移动网络使用 Pixel 手机How to unlock a Google Pixel phone, so you can switch carrier networks 保修信息查询 Google 保修信息查询 美国 点击上面的网站链接，会让你登录谷歌账号，随后跳转到美国地区的查询链接 https://store.google.com/us/repair 。如果你的 Pixel 是其他地区购买的， 你可能需要把链接里的 us 改成购买所在地的区域代码才能查询到信息，如 https://store.google.com/gb/repair （gb, Great Britain 的简写，为英国的区域代码）。 用手机拨号器拨打 *#06# ，可以看到手机的 IMEI 和序列号。IMEI 处的内容为 *************** / **，我们这里取 / 前面的内容（也就是前 15 位），输入到网站里即可获知 Pixel 的容量大小，机身颜色和保修截止日期等。有部分人可以查到 Unlocked（无运营商锁），Verizon（Verizon 运营商版），或者是 Refurbished（官翻机）之类的字样，而我这里却什么都查不到🤣。 确认是否可以解锁 bootloader 前往「Settings（设置） -&gt; About phone（关于手机） -&gt; Build number（版本号）」，连续点击版本号 7 次即可开启「开发者选项」。 确保手机能够正常访问国际互联网（如路由器翻墙，或手机开代理软件等） 前往「Settings（设置） -&gt; System（系统） -&gt; Adavanced（高级） -&gt; Developer options（开发者选项）」，开启「OEM unlocking」选项。如若选项显示为灰色，且为不可开启的状态，则很可能是 Verizon 版（带运营商锁的版本），我手中的这台 Pixel 就是这样😂。 开启「OEM unlocking」选项后，手机进入 bootloader 模式（手机在重启或开机的过程中，长按音量下键即可进入 bootloader 模式），可以看到 Product/Variant: sailfish-US-PVT 。US 指的是美国，PVT 则是指 产品验证测试阶段 （production validation test），这么来说也算是正常的销售商品；如若是 EVT 的话则是指 工程验证测试阶段 （engineering validation test），那么这种手机也就是俗称上的工程机了。 为了完成下面的操作，请确保满足以下条件： 了解什么是 cmd 你的电脑已经配置好 ADB 工具的环境变量（不懂的话就请网上自行搜索“ADB 环境变量”） 手机已通过数据线连接上电脑 完成上述步骤后，手机在 bootloader 模式尝试解锁 bootloader 的命令，电脑打开 cmd 执行： 1fasboot flashing unlock 如果你前面正常启用「OEM unlocking」选项的话，这时手机应该就会询问你是否解锁 bootloader。由于安全设计，如果你确认解锁 bootloader 手机将会删除所有的数据（即恢复出厂设置），取消则不会解锁 bootloader。（而我这边输入命令后，直接报错 FAILED (remote: Flashing Unlock is not allowed) ，也就根本不会询问是否解锁 bootloader。这也是正常的，因为我前面根本无法开启 OEM unlocking 的选项🥺。经过上面的操作，我基本可以确认我这台 Pixel 就是 Verizon 版的了…） 更简单的方法确认是不是 Verizon 版最后我查阅资料发现有个简单的方法确认 Pixel 是不是 Verizon 版本的，只需要这么做： 前往「Settings（设置） -&gt; System（系统） -&gt; Adavanced（高级） -&gt; Developer options（开发者选项）」，开启「USB Debuging（USB 调试）」的选项。 然后 cmd 执行： 1adb start-server 期间手机会弹框问询是否允许此电脑对其进行调试，勾选「Always allow from this computer（总是允许此电脑调试）」 ，然后点击 Allow 即可。 最后 cmd 执行命令： 1adb shell getprop ro.boot.cid 如果返回的值为 VZW__001 ，那么很抱歉这个 Pixel 是 Verizon 版的；无运营商锁的版本的返回值应为 11111111。唉，不说了，我这台就是😂。 后续：最后我要说的是，尽管不能通过正常渠道解锁 Verizon 版 Pixel 的 bootloader。但是 Pixel 1 还是有办法解锁的（即使是 Pixel 1 最后更新的系统版本 —— 2019 年 12 月），我去了某宝找奸商花费了 50 RMB 成功解锁（为了避免广告嫌疑这里就不说店名了，可以搜索关键词：Pixel bl 锁","categories":[{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/categories/Android/"}],"tags":[{"name":"Google","slug":"Google","permalink":"https://ericclose.github.io/tags/Google/"},{"name":"pixel","slug":"pixel","permalink":"https://ericclose.github.io/tags/pixel/"},{"name":"sailfish","slug":"sailfish","permalink":"https://ericclose.github.io/tags/sailfish/"},{"name":"运营商","slug":"运营商","permalink":"https://ericclose.github.io/tags/%E8%BF%90%E8%90%A5%E5%95%86/"},{"name":"Verizon","slug":"Verizon","permalink":"https://ericclose.github.io/tags/Verizon/"},{"name":"保修信息","slug":"保修信息","permalink":"https://ericclose.github.io/tags/%E4%BF%9D%E4%BF%AE%E4%BF%A1%E6%81%AF/"}]},{"title":"教您如何通过 Google 开机向导","slug":"Google-setup-wizard","date":"2020-05-25T08:37:11.000Z","updated":"2020-10-22T09:13:22.107Z","comments":true,"path":"Google-setup-wizard.html","link":"","permalink":"https://ericclose.github.io/Google-setup-wizard.html","excerpt":"当你在没有退出 Google 帐号就刷机的情况下，只是通过 TWRP 直接格式化手机或者是刷了 OpenGapps 后可能会遇到无法跳过开机向导的情况。具体来说，也就是触发了 Android 的 FRP（Factory Reset Protection）机制，详情如下：","text":"当你在没有退出 Google 帐号就刷机的情况下，只是通过 TWRP 直接格式化手机或者是刷了 OpenGapps 后可能会遇到无法跳过开机向导的情况。具体来说，也就是触发了 Android 的 FRP（Factory Reset Protection）机制，详情如下： Android 原生的 FRP 机制，是从 Android 5.1 开始引入的。为了实现这个功能，手机有一个单独的分区，config 或 frp 来存放重置保护状态的相关信息。如果此分区里被标记为非正常重置且存放了特定加密存储后的 Google 账户信息，手机在非正常重置之后开机，会无法跳过 Wi-Fi 连接。连接到能访问到 Google 服务的热点之后，手机会强制搜索系统更新，并要求用户登录重置前使用的 Google 账户来验证用户的所有权。——引用自重置保护 / 谷歌锁 Factory Reset Protection 的解除方法 - LetITFly BBS 由于在中国大陆的网络环境下，Google 的服务器是无法正常联通的，所以就会出现难以通过 Google 开机向导的情况，下面我会介绍 3 种方法来教您如何解决这一困境。 解决方法解决方法如下，任选其中一种即可。 1. 点按四角法这个方法最简单，缺点是仅仅适用于通过刷入 OpenGapps 后开机遇到开机向导过不去的情况，你只要从左上角沿边缘顺时针点按图中所示的区域，即可直接跳过烦人的验证。注意不要误触到其他区域。 2. 局域网代理法这个操作稍显复杂，但通过局域网代理的方法我们可以在手机端没办法使用代理 app 翻墙的情况下，登录 Google 账户来完成向导配置，我个人会更偏好这种做法。 电脑端的操作 整体流程如下： 电脑启用代理软件 允许来自局域网的连接 记住本地 HTTP 代理端口 获取电脑的局域网（LAN）IP 首先，我们需要在同一局域网下的电脑里启用代理软件，这里以 Clash for Windows 为例。 启用代理软件后，如上图的标记，打开允许来自局域网的连接的选项，并记住代理软件的本地 HTTP 代理端口，等下会用到。 注意：即便是你使用的是不同的代理软件，如 SS / SSR / V2Ray 之类的，应该都是有允许来自局域网的连接的这个功能选项，你自己找找看，同时注意下你代理软件的本地 HTTP 代理端口（应该是和我的有所不同）。 然后你需要记住你电脑的局域网（LAN）IP，可以通过命令获取。Windows 用户在 cmd 执行 ipconfig ，而 Linux / macOS 用户在 terminal 执行 ifconfig 即可。 完成上述流程后，就轮到手机端的操作了。 手机端的操作 手机连接 Wi-Fi 填写完密码后，不要着急着连接。 展开「Advanced options 高级选项」-&gt;「Proxy 代理」-&gt; 选择「Manual 手动」-&gt; 在「Proxy hostname 代理主机名」填写你电脑的局域网（LAN）IP -&gt;「Proxy port 代理端口」填写你所使用的代理软件的本地 HTTP 代理端口 -&gt; 最后「Connect 连接」Wi-Fi。 之后，你的手机就能通过连接局域网代理直接科学上网登录 Google 账户了，接下来应该不用我多说了。 3. 覆写分区法前面我们提到过 Google 账户信息是存放在 config 或 frp 分区上的，由于此分区不存在文件系统，所以我们的做法是往这个分区里填零，也就是覆写分区。 具体来说，我们需要知道当前设备的账户信息是存放在哪个分区。我们可以让手机进入 TWRP 之后，通过 USB 与电脑连接，然后在电脑终端上执行下列命令（请提前配置好 adb）获知手机的分区信息： 12adb shellls -l /dev/block/bootdevice/by-name 输出的结果比较长，注意找找输出的其中一行里是 frp 还是 config，以我的小米 6 为例，其中一行是： 123......lrwxrwxrwx 1 root root 15 1970-07-17 07:27 frp -&gt; /dev/block/sda7...... 由此可知我的手机是将 Google 账户信息存放在 frp 上的，所以覆写 frp 分区的命令是： 1dd if=/dev/zero of=/dev/block/bootdevice/by-name/frp 如果你的手机是存放在 config 上，那么把上面一行的覆写命令里的 frp 改为 config 就行了。 可能有无法写入的特殊情况，如果遇到的话（没遇到就不用管）可以在覆写命令加上参数，最终命令如下： 1dd if=/dev/zero of=/dev/block/bootdevice/by-name/frp bs=512 count=1024 照理来说，上述 3 种方法都能奏效，根据你的实际情况选择就行，操作完成之后应该就能通过 Google 开机向导啦。","categories":[{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/categories/Android/"}],"tags":[{"name":"Google","slug":"Google","permalink":"https://ericclose.github.io/tags/Google/"},{"name":"账户锁","slug":"账户锁","permalink":"https://ericclose.github.io/tags/%E8%B4%A6%E6%88%B7%E9%94%81/"},{"name":"FRP","slug":"FRP","permalink":"https://ericclose.github.io/tags/FRP/"},{"name":"开机向导","slug":"开机向导","permalink":"https://ericclose.github.io/tags/%E5%BC%80%E6%9C%BA%E5%90%91%E5%AF%BC/"},{"name":"验证","slug":"验证","permalink":"https://ericclose.github.io/tags/%E9%AA%8C%E8%AF%81/"},{"name":"向导","slug":"向导","permalink":"https://ericclose.github.io/tags/%E5%90%91%E5%AF%BC/"}]},{"title":"2020年 小米6 刷机 LineageOS 17.1 Official","slug":"Install-LineageOS-on-sagit","date":"2020-04-24T09:14:53.000Z","updated":"2020-11-11T09:15:55.516Z","comments":true,"path":"Install-LineageOS-on-sagit.html","link":"","permalink":"https://ericclose.github.io/Install-LineageOS-on-sagit.html","excerpt":"时至今日，依然有很多小米 6 的用户因为各种原因没有换手机，不得不说那些钉子户们也引起了雷军的注意，下面是雷军让钉子户们投票是想要继续使用小米 6 还是换新款的小米 10，又或者换其他手机。结果雷军的脸再次被钉子户们啪啪啪…","text":"时至今日，依然有很多小米 6 的用户因为各种原因没有换手机，不得不说那些钉子户们也引起了雷军的注意，下面是雷军让钉子户们投票是想要继续使用小米 6 还是换新款的小米 10，又或者换其他手机。结果雷军的脸再次被钉子户们啪啪啪… 再之后，小米推出 49 元换电池活动，49 元包含电池 + 人工费，不会收取其他费用。支持 15 款机型，包括小米 9 系列、MIX 2/S/3 等~ 网友：为啥没有小米 6… 然后雷军发话了：小米 6 钉子户们，你们开心吗？49 元换电池，希望大家能继续坚持 3 年！🐶 我本人来说不屑使用 MIUI，所以早早就刷上了我永远喜欢的 LineageOS，的确是美滋滋啊。 好了，不多说了，老司机带你们走一下刷机流程吧。 基本要求 重要提示：在实际操作之前，请至少完整阅读一次说明，以避免因为错过任何东西而导致出现问题！ 确保你的电脑已经配置好 adb 和 fastboot 的环境变量，详情见这里。 解锁 bootloader 注意：以下步骤仅需要执行一次。 警告：解锁 bootloader 将清除设备上的所有数据！在继续之前，请确保您要保留的数据已备份到您的 PC 或您的 Google 帐户或其他位置。 下载小米官方解锁工具。 访问小米官方解锁网站，登录小米账号申请解锁权限，下载官方解锁工具。 开启开发者选项 「设置」-&gt;「全部参数」-&gt; 连续点击「MIUI 版本」（直至开启开发者选项即可） 设备绑定小米账号 「设置」-&gt;「更多设置」-&gt;「开发者选项」-&gt;「设备解锁状态」（登录小米账号） 开启 USB 调试 「设置」-&gt;「更多设置」-&gt;「开发者选项」-&gt;「USB 调试」（开启即可）。 开启 OEM 解锁 「设置」-&gt;「更多设置」-&gt;「开发者选项」-&gt;「OEM 解锁」（开启即可）。 手机重启至 fastboot 模式 通过 USB 将设备连接到 PC。，由于前面已配置好 adb 和 fastboot 的环境变量，所以我们可以直接执行相应的命令。（如果手机有弹框是否允许此电脑调试，点击允许即可） 打开 cmd（命令提示符），执行下列命令 1adb reboot bootloader 执行完命令后就会进入 fastboot 模式（也就是米兔修 Android 机器人的界面） 解压运行小米官方解锁工具 解压完后，文件夹里找到 miflash_unlock.exe，双击运行即可。登录账号依照提示完成解锁即可。 什么？解锁 bootloader 还需要绑定小米账号满 72 小时（还得相对活跃地使用），可还行 （雷军：求求你们了，不要解锁！不要解锁！不要解锁！人家小米 6 还是处呢） 🐶保命 真正解锁 bootloader 的时候到了 陪伴了 MIUI 三个日夜，它终于满足了，我是一滴念想也没有了，所以它也便不再挽留我。此时重复步骤 4 ~ 步骤 7 即可。 刷机操作 下载 TWRP 前往这个页面，找到 *.img 文件下载即可。 通过 USB 将设备连接到 PC。 在电脑上，打开 cmd，然后输入： 1adb reboot bootloader 刷入 TWRP 在 cmd 上输入： 1fastboot flash recovery *.img 如果你用 Linux 或者 macOS 执行 fastboot 命令提示权限不足，请在 fastboot 之前加上 sudo，即（sudo fastboot flash recovery *.img） 命令里的 *.img 不需要手动输入，直接拖拽文件到 cmd 窗口即可，系统会自动填写文件相应的路径。如图： 重启进入 TWRP 执行命令重启 1fastboot reboot 执行完命令立马长按 音量 + ，直至进入 TWRP 即可。 格式化 Data 「TWRP主界面」-&gt;「Wipe」-&gt;「Format Data」（输入 yes，打钩确认格式化 data） 五清 「TWRP主界面」-&gt;「Wipe」-&gt;「Adavanced Wipe」-&gt; 勾选「Dalvik / ART Cache」、「Cache」、「System」、「Data」、「Internal Storage」（切勿勾选到「Vendor」） -&gt; 划过滑动条确认擦除 在刷入官方 LineageOS 之前您自 2019 年 8 月 4 日起必须使用 Android 9.0 MIUI 的 firmware。〖LineageOS 17.1 官方安装说明没有提到 firmware 版本的要求（之前 LineageOS 16 的安装说明有提过），所以估计是这个 firmware 或以上版本都可以，我还是用的这个 firmware〗 firmware 下载地址：https://osdn.net/projects/xiaomifirmwareupdater/storage/Stable/V10/sagit/fw_sagit_miui_MI6Global_V10.4.1.0.PCAMIXM_38edd1584c_9.0.zip 刷入 firmware 过程：「TWRP主界面」-&gt;「Advanced」-&gt;「ADB Sideload」（划过滑条即可），然后电脑打开 cmd，输入命令： 1adb sideload *.zip 命令里的 *.zip 也是和之前刷 TWRP 一样也是不需要手动输入的，直接拖拽文件到 cmd 窗口即可，系统会自动填写文件相应的路径。 刷完后手机会自动退出 ADB Sideload 刷入 LineageOS 官方包 LineageOS for 小米 6 下载地址：https://download.lineageos.org/sagit 嗯~ o(￣▽￣)o，我们下载最新的就行 刷入 LineageOS 过程：：「TWRP 主界面」-&gt;：「Advanced」-&gt;「ADB Sideload」（划过滑条即可），电脑打开 cmd，输入命令： 1adb sideload *.zip 命令里的 *.zip 也是和之前刷 TWRP 和 firmware 一样的，也是不需要手动输入的，直接拖拽文件到 cmd 窗口即可，系统会自动填写文件相应的路径。 刷入 OpenGapps 以获取 Google 全家桶（可选项） OpenGapps 地址： https://opengapps.org/ 选择 ARM64，Android 10.0，Variant 根据需求进行选择 micro：有限的 Google Apps 如 Gmail，日历，Google Now 以及 Play 商店无法提供的额外功能 nano：最小化安装，但包括 Play 商店无法提供的额外功能 pico：获得 Google Play 功能的最低要求 tvstock：适用于 Android TV 设备的选项（电视的，和手机无关，别选这个） 上述选项的注释均由 Google 机翻，本人稍作改动，如有误导敬请谅解。本想推荐 aroma 的，文件虽然是最大的，但毕竟可以随自己心意安装组件。 ❗️ 由于 OpenGapps for Android 10 还存在一些问题，OpenGapps 在当前稳定版本中只启用了 micro 及其以下版本，只有等 OpenGapps 团队解决了相关问题，才会提供更大的包。所以现在强烈建议使用 nano 包 刷入 OpenGapps 也是和前面一样，都是用 adb sideload，这里就不再赘述了。 在完成上述内容后，开机前建议执行「Format Data」，分别擦除「Dalvik / ART Cache」、「Cache」、「Data」的操作（❗️ 不要选错了）。 开机测试。 ❗️ 我对于刷入 Magisk 的建议是，先看看是不是能正常开机，如果可以再刷 Magisk 还来得及。 所以现在刷入 Magisk 以获取 root 权限（可选项） 众所周知，如今主流的获取 root 权限的方案就是 Magisk（Magisk 是一款帮助 Android 设备获取 root 权限的开源工具）。 这里我介绍下 2 种方法。一种是通过 Adb Sideload 刷进去,另一种是通过 fastboot。（推荐使用 Adb Sideload 的方式，不推荐用 fastboot 方式刷是因为这种方式刷入 Magisk 的话，手机每次重启会卡开机动画，得手动进 TWRP 才能正常重启） adb sideload 方式fastboot 方式点此在页面找到最新的 Magisk-v版本号.zip 下载，以我当前的时间为例，目前最新的 Magisk 版本为 20.4，那么就是下载 Magisk-v20.4.zip。 adb sideload 刷入方式和前面说的没什么不同，这里就不说了。 最后再次开机后发现没有 Magisk Manger（Magisk 的管理 app）的话，点此在该页面找到最新的 Magisk Manger 的 apk 安装即可。❶ 点此在该页面找到 Magisk Manger 的 apk 安装即可。 ❷ 电脑上解压 LinegaeOS 的刷机包 *.zip，找到 boot.img，传到手机里。 ❸ 打开 Magisk Manager（Magisk 的管理 app，并不是 Magisk 本体），首页会显示 Magisk 未安装，点击旁边的「Install 安装」-&gt; 然后弹框会询问你是否现在安装 Magisk ，你选「Install 安装」-&gt; 再然后选「Select and Patch a File 选择并修补一个文件」，找到刚传的 boot.img，等 patch 完后会生成 内部存储/Download/magisk_patched.img 文件。最后把这个文件传回电脑，然后执行命令： 1fastboot flash boot *.img 一样的，命令里的 *.img 不需要手动填写，把 magisk_patched.img 拖拽到 cmd 就行。 搞定完一切后，刷机操作就完成了。我来展示下成果图吧（我装的 lawnchair 启动器）~ 常见问题 为什么我刷完机后，想要再进 TWRP 玩玩其他东西，但是需要输入密码，密码是什么？ 答：这个密码是您设置的锁屏密码，默认情况下，您的设备是全盘加密的，这是为了安全着想而设计的（但是也不排除遭到他人强迫给出密码解密的可能），只有在正确的输入你的锁屏密码才能解密设备。 刷 OpenGapps 后无法通过开机向导该怎么办？ 当你在没有退出 Google 帐号就刷机的情况下，只是通过 TWRP 直接格式化手机或者是刷了 OpenGapps 后可能会遇到无法跳过开机向导的情况。具体来说，也就是触发了 Android 的 FRP（Factory Reset Protection）机制，具体解决办法可以看看这篇文章。 （没遇到就不用管）如果遇到数据能上网，但打电话显示 sim 卡无信号或无法连接到移动网络该怎么办？ 答：系统默认开启了 VoLTE，但是 VoLTE 是不可用的。（我本人电信卡作为主卡是遇到了的，我也不知道是不是我没有开通 VoLTE 的原因，又或者是电信卡的原因，还是这个官方 LineageOS 本身就不能用 VoLTE。）解决方法：「Settings 设置」-&gt;「Network and Internet 网络 &amp; 互联网」-&gt;「Mobile network 移动网络」里选择出现问题的 sim 卡 -&gt;「Advanced 高级」-&gt; 找到「VoLTE 增强 4G LTE 模式（使用LTE服务来增强语音和其他通讯）」，把这个选项关了就行了。总之整完了这个，我测试了电信打电话，和数据上网也没什么问题了。 晚上关灯搞手机，手机按键的背光灯常亮看起来要瞎了，怎么把背光灯关掉？ 答：最好的做法是睡觉不要玩手机！ 好啦，告诉你吧。「设置」-&gt;「系统」-&gt;「按钮」-&gt;「背光灯」-&gt;「按键亮度」调节至 0% 就可以啦。 如何在状态栏里显示电池百分比和实时网速？ 答关于电池百分比：在「Settings 设置」-&gt; 「System 系统」-&gt;「Status bar 状态栏」-&gt; 「Battery percentage 电池百分比」，建议选择「Next to the icon 图标旁边」。关于实时显示网速：在「Settings 设置」-&gt;「System 系统」-&gt;「Status bar 状态栏」-&gt;「Network traffic monitor 网络流量监视器」-&gt;「Display mode 显示模式」，选择「Upload and Download 上传和下载」-&gt;「Traffic mesurement units 流量测量单位」，选择 kB/s（记住得是大写的 B，小写的话就是 1000 比特每秒作为单位） 哪里可以获取 Google 相机？ 答：我用的是俄罗斯的一位老哥 Alexey070315 搞的 Google 相机。现在最新版本是 2020-04-07 的 MGC_MIX2S_JOKER3.apk，点此下载安装即可。 手机连点两下亮屏，哪里可以取消？ 答：其实这个是系统默认开启的双击屏幕的任意位置唤醒设备的功能。如果你想要关掉的话，你可以去「Settings 设置」-&gt;「Display 显示」-&gt;「Advanced 高级」-&gt;「Tap to wake 点击唤醒」选项关掉即可。 不习惯默认的“任务键在左，返回键在右”，需要在哪里设置反转呢？ 答：你可以在「Settings 设置」-&gt;「System 系统」-&gt;「Buttons 按键」-&gt;「Additional buttons 更多按键」-&gt;「Swap buttons 交换按键」开启这个选项即可。 状态栏的 Wi-Fi 显示不可用或者是受限，这是为什么呢，又该如何解决？ 详情请参见：（类）原生 Android 网络去叉／叹号 Android 5.0 - 10.0 本文完结，如有其他疑问可以在评论区留言，在我能力允许的情况下我会对此进行答复~","categories":[{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/categories/Android/"}],"tags":[{"name":"小米","slug":"小米","permalink":"https://ericclose.github.io/tags/%E5%B0%8F%E7%B1%B3/"},{"name":"sagit","slug":"sagit","permalink":"https://ericclose.github.io/tags/sagit/"},{"name":"LineageOS","slug":"LineageOS","permalink":"https://ericclose.github.io/tags/LineageOS/"}]},{"title":"Arch Linux with KDE 配置触控板手势","slug":"libinput-gestures-on-Arch-Linux-with-KDE","date":"2020-04-19T07:05:00.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"libinput-gestures-on-Arch-Linux-with-KDE.html","link":"","permalink":"https://ericclose.github.io/libinput-gestures-on-Arch-Linux-with-KDE.html","excerpt":"本文教你如何配置触控板的手势，以 Arch Linux 为例，桌面环境为 KDE。 libinput-gestures: 使用libinput在触摸板上执行动作手势 将当前用户加入到input组（您必须是input用户组的成员才具有读取触控板设备的权限） 1sudo gpasswd -a $USER input","text":"本文教你如何配置触控板的手势，以 Arch Linux 为例，桌面环境为 KDE。 libinput-gestures: 使用libinput在触摸板上执行动作手势 将当前用户加入到input组（您必须是input用户组的成员才具有读取触控板设备的权限） 1sudo gpasswd -a $USER input 注意，注销用户或重启以生效 安装 libinput-gestures 123git clone https://aur.archlinux.org/libinput-gestures.gitcd libinput-gesturesmakepkg -si 开启相应服务并设为开机自启 12libinput-gestures-setup autostartlibinput-gestures-setup start 编辑配置文件 12cp /etc/libinput-gestures.conf ~/.config/libinput-gestures.confvim ~/.config/libinput-gestures.conf 在文件的末尾追加如下内容 1234gesture swipe down 3 xdotool key ctrl+F12 # 三指下滑回到桌面gesture swipe up 3 xdotool key ctrl+F10 # 三指上滑查看窗口gesture swipe right 4 xdotool key meta+Tab # 四指右滑切换窗口gesture swipe left 4 xdotool key meta+Tab # 四指左滑切换窗口 然后在 「System Settings 系统设置」 -&gt; 「Input Devices 输入设备」 -&gt; 「Touchpad 触控板」 -&gt; 启用 「Tap-to-click 轻触点击」 和 「Tap-and-drag 连续轻触2下拖拽」 最后，注销用户或重启生效。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/tags/Linux/"},{"name":"触控板","slug":"触控板","permalink":"https://ericclose.github.io/tags/%E8%A7%A6%E6%8E%A7%E6%9D%BF/"},{"name":"KDE","slug":"KDE","permalink":"https://ericclose.github.io/tags/KDE/"}]},{"title":"一文让你了解如何为 Git 设置代理","slug":"git-proxy-config","date":"2020-03-31T15:28:41.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"git-proxy-config.html","link":"","permalink":"https://ericclose.github.io/git-proxy-config.html","excerpt":"如果你在克隆或从远程仓库获取数据时遇到很慢甚至超时的情况，那么此时你可能需要配置 Git 的代理。我这里就讲讲两种情况的代理方法：使用 HTTP 或 HTTPS 协议连接到 Git 仓库的代理方法和使用 SSH 协议连接到 Git 仓库的代理方法。","text":"如果你在克隆或从远程仓库获取数据时遇到很慢甚至超时的情况，那么此时你可能需要配置 Git 的代理。我这里就讲讲两种情况的代理方法：使用 HTTP 或 HTTPS 协议连接到 Git 仓库的代理方法和使用 SSH 协议连接到 Git 仓库的代理方法。 如果远程仓库的格式像下面那样，这种就是使用 HTTP 或 HTTPS 协议连接到 Git 仓库的情况 12http:&#x2F;&#x2F;github.com&#x2F;cms-sw&#x2F;cmssw.githttps:&#x2F;&#x2F;github.com&#x2F;cms-sw&#x2F;cmssw.git 如果远程仓库的格式像下面那样，这种就是使用 SSH 协议连接到 Git 仓库的情况 12git@github.com:cms-sw&#x2F;cmssw.gitssh:&#x2F;&#x2F;git@github.com&#x2F;cms-sw&#x2F;cmssw.git 预先准备在开始操作之前，你需要明确这些内容： 电脑已经安装了 Git（这不是废话吗，23333）。如果你是 Windows 用户，那么本文的命令你需要通过 Git Bash 来执行；如果你是 Linux 或 macOS 用户直接在终端运行即可。 知道如何用 vim 编辑文件，退出编辑的基本操作。 使用 HTTP 或 HTTPS 协议连接到 Git 仓库的代理方法针对所有域名的 Git 仓库 这样做是对所有域名生效的的： git config –global http.proxy protocol://127.0.0.1:port 注意： --glboal 选项指的是修改 Git 的全局配置文件 ~/.gitconfig，而非各个 Git 仓库里的配置文件 .git/config。protocol 指的是代理的协议，如 http，https，socks5 等。port 则为端口号。 针对特定域名的 Git 仓库 或者针对特定域名生效： git config –global http.url.proxy protocol://127.0.0.1:port 注意： 此处的 url 即为你需要走代理的仓库域名，url 以 http:// 和 https:// 打头的均用这个方法。 网上很多中文教程，可能会告诉你 https:// 打头的 url 使用“git config –global https.https://example.com.proxy protocol://127.0.0.1:port”，这种做法其实是错的！记住一点：Git 不认 https.proxy ，设置 http.proxy 就可以支持 https 了。 如果想了解 url 的更多模式，如子域名等的情况，可参照 Git 的官方文档 。网页内容搜索 http.&lt;url&gt;.*，即可找到相关信息。 实例 针对 HTTP 或 HTTPS 协议连接到 Git 仓库的代理方法 Windows，Linux，macOS 用户的操作是一样的。 也许你光看我上面的内容还看不明白，不妨我们来看下实例部分： 此处以 Clash for Windows 为例子。如图： Clash for Windows 既支持 HTTP / HTTPS 协议代理，也支持 SOCKS v5 协议代理。如果你使用其他的代理软件，你可以根据你使用的代理软件的代理协议和本地端口号参考本文修改即可。 针对所有域名的 Git 仓库根据你的代理软件支持的代理协议选取其中一种即可： http 代理socks5 代理1git config --global http.proxy http://127.0.0.1:7890 注意：7890 为 Clash for Windows 的 http 代理端口。1git config --global http.proxy socks5://127.0.0.1:7891 注意：7891 为 Clash for Windows 的 socks5 代理端口。 针对特定域名的 Git 仓库前面我们说的是，让所有域名下的仓库都走代理的情况，但是在现实情况下我们并不想这么做。那么现在我来介绍一下针对特定域名仓库走代理的做法，此处以 GitHub 为例: 当我们从 GitHub 仓库克隆源码时我们往往是这么做的的： 1git clone https://github.com/&lt;user&gt;/&lt;repository&gt;.git 那么我前面所提到的 url 就是 https://github.com 根据你的代理软件支持的代理协议选取其中一种即可： http 代理socks5 代理1git config --global http.https://github.com.proxy http://127.0.0.1:78901git config --global http.https://github.com.proxy socks5://127.0.0.1:7891 使用 SSH 协议连接到 Git 仓库的代理方法在这种情况下，Git 依靠 ssh 处理连接； 为了通过代理进行连接，您必须配置 ssh 本身，在 ~/.ssh/config 文件中设置 ProxyCommand 选项。Linux 和 macOS 是通过 nc 来执行 ProxyCommand 的，Windows 下则是通过 connect。 相关文档 ssh_config(5) ProxyCommand 的内容: 123456789ProxyCommandSpecifies the command to use to connect to the server. The command string extends to the end of the line, and is executed using the user&#39;s shell ‘exec’ directive to avoid a lingering shell process.Arguments to ProxyCommand accept the tokens described in the TOKENS section. The command can be basically anything, and should read from its standard input and write to its standard output. It should eventually connect an sshd(8) server running on some machine, or execute sshd -i somewhere. Host key management will be done using the Hostname of the host being connected (defaulting to the name typed by the user). Setting the command to none disables this option entirely. Note that CheckHostIP is not available for connects with a proxy command.This directive is useful in conjunction with nc(1) and its proxy support. For example, the following directive would connect via an HTTP proxy at 192.0.2.0:ProxyCommand &#x2F;usr&#x2F;bin&#x2F;nc -X connect -x 192.0.2.0:8080 %h %p nc(1) -X 和 -x 选项的的内容: 12345-X proxy_protocolUse proxy_protocol when talking to the proxy server. Supported protocols are 4 (SOCKS v.4), 5 (SOCKS v.5) and connect (HTTPS proxy). If the protocol is not specified, SOCKS version 5 is used.-x proxy_address[:port]Connect to destination using a proxy at proxy_address and port. If port is not specified, the well-known port for the proxy protocol is used (1080 for SOCKS, 3128 for HTTPS). An IPv6 address can be specified unambiguously by enclosing proxy_address in square brackets. A proxy cannot be used with any of the options -lsuU. connect -H 和 S 选项的内容 12345-H option specify hostname and port number of http proxy server to relay. If port is omitted, 80 is used. You can specify this value by environment variable HTTP_PROXY and give -h option to use it.-S option specify hostname and port number of SOCKS server to relay. Like -H option, port number can be omit and default is 1080. You can also specify this value pair by environment variable SOCKS5_SERVER and give -s option to use it.-4 and -5 is for specifying SOCKS protocol version. It is valid only using with -s or -S. Default is -5 (protocol version 5) 实例接下来的操作，请按照你的系统，以及所需代理协议进行选择： Linux 和 macOS 用户https 代理socks5 代理编辑 ~/.ssh/config 文件 1vim ~/.ssh/config 给文件加上如下内容: 123Host github.com User git ProxyCommand nc -X connect -x 127.0.0.1:7890 %h %p 解释: Host 后面 接的 github.com 是指定要走代理的仓库域名。 在 ProxyCommand 中，Linux 和 macOS 用户用的是 nc。 -X 选项后面接的是 connect 的意思是 HTTPS 代理。 -x 选项后面加上代理地址和端口号。 在调用 ProxyCommand 时，％h 和 ％p 将会被自动替换为目标主机名和 SSH 命令指定的端口（%h 和 %p 不要修改，保留原样即可）。 编辑 ~/.ssh/config 文件 1vim ~/.ssh/config 给文件加上如下内容，2种任选一个: Host 后面 接的 github.com 是指定要走代理的仓库域名。 在 ProxyCommand 中，Linux 和 macOS 用户用的是 nc 。 在调用 ProxyCommand 时，％h 和 ％p 将会被自动替换为目标主机名和 SSH 命令指定的端口（ %h 和 %p 不要修改，保留原样即可）。 如果 -X 选项后面接的是数字 5，那么指的就是 socks5 代理。 当然你直接不写上 -X 选项也是可以的，因为在没有指定协议的情况下，默认是使用socks5代理的。所以以下 2 种的写法效果一样 ，都指的是走 socks5 代理： ①. 第一种 123Host github.com User git ProxyCommand nc -X 5 -x 127.0.0.1:7891 %h %p 或 ②. 第二种 123Host github.com User git ProxyCommand nc -x 127.0.0.1:7891 %h %p Windows 用户http 代理socks5 代理编辑 ~/.ssh/config 文件 1vim ~/.ssh/config 给文件加上以下内容： 123Host github.com User git ProxyCommand connect -H 127.0.0.1:7890 %h %p 解释: Host 后面 接的 github.com 是指定要走代理的仓库域名。 在 ProxyCommand 中，Windows 用户用的是 connect 。 -H 选项的意思是 HTTP 代理。 在调用 ProxyCommand 时，％h 和 ％p 将会被自动替换为目标主机名和 SSH 命令指定的端口（ %h 和 %p 不要修改，保留原样即可）。 编辑 ~/.ssh/config 文件 1vim ~/.ssh/config 给文件加上如下内容： 123Host github.com User git ProxyCommand connect -S 127.0.0.1:7891 %h %p 解释： Host 后面 接的 github.com 是指定要走代理的仓库域名。 在 ProxyCommand 中，Windows 用户用的是 connect。 单独的 -S 选项指的就是 socks5 代理 在调用 ProxyCommand 时，％h 和 ％p 将会被自动替换为目标主机名和 SSH 命令指定的端口（ %h 和 %p 不要修改，保留原样即可）。 如何取消 Git 和 ssh 的代理这里就不多说了，说了那么多，我们无非就是修改了 2 个文件，即 ~/.gitconfig 和 ~/.ssh/.config ，删除或注释（在相应行的开头加上 # 即可）我们增加的相应内容即可完成取消代理。 参考链接 Git - git-config Documentation Configure Git to use a proxy Tutorial: how to use git through a proxy ssh_config(5) - OpenBSD manual pages nc(1) - OpenBSD manual pages SSH Proxy Command – connect.c How can I use SSH with a SOCKS 5 proxy? Git 基础——代理 SSH via HTTP proxy in OSX","categories":[{"name":"Proxy","slug":"Proxy","permalink":"https://ericclose.github.io/categories/Proxy/"}],"tags":[{"name":"代理","slug":"代理","permalink":"https://ericclose.github.io/tags/%E4%BB%A3%E7%90%86/"},{"name":"Git","slug":"Git","permalink":"https://ericclose.github.io/tags/Git/"},{"name":"仓库","slug":"仓库","permalink":"https://ericclose.github.io/tags/%E4%BB%93%E5%BA%93/"},{"name":"http","slug":"http","permalink":"https://ericclose.github.io/tags/http/"},{"name":"https","slug":"https","permalink":"https://ericclose.github.io/tags/https/"},{"name":"ssh","slug":"ssh","permalink":"https://ericclose.github.io/tags/ssh/"}]},{"title":"如何通过 HWIDGEN 以数字许可的方式激活 Windows 10","slug":"active-Windows-10-with-digital-license","date":"2020-03-22T14:47:03.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"active-Windows-10-with-digital-license.html","link":"","permalink":"https://ericclose.github.io/active-Windows-10-with-digital-license.html","excerpt":"HWIDGEN 是一款由国外 Nsane 论坛会员 s1ave77 制作的 Windows 10 数字权利激活工具。这款 Windows 10 数字权利获取工具，可以自动获取 Windows 10 数字许可证激活，无需产品密钥，以最简单的方式永久激活。","text":"HWIDGEN 是一款由国外 Nsane 论坛会员 s1ave77 制作的 Windows 10 数字权利激活工具。这款 Windows 10 数字权利获取工具，可以自动获取 Windows 10 数字许可证激活，无需产品密钥，以最简单的方式永久激活。 HWIDGEN 的源码 https://github.com/CHEF-KOCH/HWIDGEN-SRC 工具下载地址 Google Drive（包含历史版本） 解压密码 3Fs44Rv#tZ4u3UOij656NgF____ 支持的 Windows 10 版本（Skus）： 核心（家庭）版（N） 核心单语言版（N） 专业版（N） 专业教育版（N） 专业工作站版（N） 教育版（N） 企业版（N） 企业 S 版（N）【2015/2016：数字证书】 企业 S 版（N）【2019：19年的离线 KMS 激活（和企业G版相似）】 服务器标准（核心）版（N）【2016/2019：19年的离线 KMS 激活（和企业G版相似）】 服务器数据中心（核心）版（N）【2016/2019：19年的离线 KMS 激活（和企业G版相似）】 服务器解决方案（核心）版（N）【2016/2019：19年的离线 KMS 激活（和企业G版相似）】 上述内容均引用自 Windows 10 数字许可证激活（HWID）方法——原创翻译 使用说明 下载 hwid.kms38.gen.mk6.zip 后将压缩包解压，输入上述密码，得到文件 hwid.kms38.gen.mk6.exe，双击它。启动完成后在 Work Mode 选中 HWID，然后 Start 即可，等进度条走完跳出 Success 弹框就激活成功啦。 进入「设置」，「安全和更新」，找到「激活」的一栏。得到“Windows 已使用数字许可证激活”的提示：","categories":[{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/categories/Windows/"}],"tags":[{"name":"激活","slug":"激活","permalink":"https://ericclose.github.io/tags/%E6%BF%80%E6%B4%BB/"},{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/tags/Windows/"}]},{"title":"竞斗云2.0 ( P&W R619AC ) 刷机教程 ( 免拆机 / 免劫持 )","slug":"R619AC-OpBoot-and-OpenWrt-flashing","date":"2019-11-23T04:33:19.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"R619AC-OpBoot-and-OpenWrt-flashing.html","link":"","permalink":"https://ericclose.github.io/R619AC-OpBoot-and-OpenWrt-flashing.html","excerpt":"目前竞斗云2.0 官方固件版本升级至 2.5.11.82 后可轻松刷入第三方固件，这简化了我们刷机的流程。 事前准备: 电脑、网线、全新 / 已恢复出厂 的竞斗云2.0 请先给路由器通上电后用网线将电脑连接至路由器的 LAN 口 下载好下列文件:","text":"目前竞斗云2.0 官方固件版本升级至 2.5.11.82 后可轻松刷入第三方固件，这简化了我们刷机的流程。 事前准备: 电脑、网线、全新 / 已恢复出厂 的竞斗云2.0 请先给路由器通上电后用网线将电脑连接至路由器的 LAN 口 下载好下列文件: 竞斗云2.0 刷机相关文件 文件名 md5sum 描述 下载 openwrt-ipq40xx-R9.11.22-unlock-p2w_r619ac-squashfs-nand-factory.bin d3e8d29d1a37872f37f9070fabb9a7a2 OpenWrt 过渡包，在竞斗云官方固件更新后刷入 链接 opboot-p2w-r619ac-flash-v1.0.8.bin c3c0efd25aa18ee505debb3a90d75fe3 OpBoot文件，刷入过渡包后刷入 链接 openwrt-ipq40xx-R9.11.23-p2w_r619ac-squashfs-nand-sysupgrade.bin 856e7571263398a8c976cbf721ac821c 刷完OpBoot后，最后刷入的OpenWrt固件 链接 MEGA 网盘下载链接: https://mega.nz/#F!hVgXjACA!CISFW8tyoKLCWs6RbC23LQ 推荐 使用梯子在 MEGA 网盘下载相关文件，当然您也可以直接点击表格中的链接下载。 官方固件更新并刷入 OpenWrt 过渡包 浏览器访问 192.168.7.1 ，进入官方固件的管理页面。 选择 「 自动获取（DHCP模式） 」 ，下一步 设置 WiFi 名称和密码，密码可为空，下一步 输入设置的密码，「 登录 」（如果没设置密码直接点登录即可） 这就进入了主界面，我们点击 「 高级设置 」 点击 「 升级检查 」 -&gt; 「 检查升级 」 升级提醒 处点击 「 确定 」 正在升级系统，请不要关闭电源… 升级完成后浏览器会重新进入路由器管理界面，重新输入设置过的密码登录即可。此时我们在主界面点击 「 高级设置 」 -&gt; 「 升级检查 」 ，这里已经可以看到在新版官方固件（版本号为 2.5.11.82 ）多了上传固件更新系统的功能。如图： 点击 「 选择文件 」 ，选中过渡包(即 openwrt-ipq40xx-R9.11.22-unlock-p2w_r619ac-squashfs-nand-factory.bin )，无需保存配置，点击 「 开始刷入 」 即可。 正在升级系统，请不要关闭电源… 刷完固件后，原有的 192.168.7.1 已经无法访问了，OpenWrt 的默认管理地址是 192.168.1.1 ，在浏览器的地址栏输入 192.168.1.1 即可。 如果能访问 OpenWrt 登录界面即表示正常刷入固件（此处我们无需登录），如图： 到这里，如果您是 Windows 用户，建议看 Hyejeong 的针针小站一文 —— 【Router】G-DOCK 竞斗云2.0 小白刷机教程 。 电脑上安装 OpenSSH 注意: 本人电脑使用的 Linux 发行版本是 Arch Linux，其默认的软件包管理器是 pacman 。请根据您使用的发行版本选择合适的包管理器安装 openssh 电脑上打开终端模拟器执行命令： 1[eric@arch ~]$ sudo pacman -S openssh 将电脑上的 OpBoot 文件 ( opboot-p2w-r619ac-flash-v1.0.8.bin ) 复制到路由器将文件从本地主机复制到远程主机，用法如下： scp local_file_path username@host_ip:/remote/directory/ 操作实例 注意: 默认密码是 password 1234567[eric@arch ~]$ scp &#x27;/home/eric/OpBoot/opboot-p2w-r619ac-flash-v1.0.8.bin&#x27; root@192.168.1.1:/tmpThe authenticity of host &#x27;192.168.1.1 (192.168.1.1)&#x27; can&#x27;t be established.RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#x27;192.168.1.1&#x27; (RSA) to the list of known hosts.root@192.168.1.1&#x27;s password: opboot-p2w-r619ac-flash-v1.0.8.bin 100% 1472KB 3.6MB/s 00:00 SSH 登录到路由器ssh 登录到远程服务器，用法如下： ssh username@server-address 操作实例 注意: 密码和前面输入的是同一个，即 password 123456789101112131415[eric@arch ~]$ ssh root@192.168.1.1root@192.168.1.1&#x27;s password: BusyBox v1.30.0 () built-in shell (ash) _______ ________ __ | |.-----.-----.-----.| | | |.----.| |_ | - || _ | -__| || | | || _|| _| |_______|| __|_____|__|__||________||__| |____| |__| W I R E L E S S F R E E D O M ----------------------------------------------------- OpenWrt SNAPSHOT, r1673-ea47656 -----------------------------------------------------root@OpenWrt:~# 读取路由器的分区表 前面已经登录到路由器的 shell 了，所以命令是在路由器上执行的了。 1234567root@OpenWrt:~# cat /proc/mtddev: size erasesize namemtd0: 04000000 00020000 &quot;rootfs&quot;mtd1: 04000000 00020000 &quot;unused1&quot;mtd2: 00170000 00010000 &quot;Bootloader&quot;mtd3: 00010000 00010000 &quot;ART&quot;mtd4: 00e80000 00010000 &quot;unused&quot; 只要查询到分区里含有 Bootloader ，就可以继续下面的刷写 Bootloader 的操作了。 校验路由器上的 OpBoot 文件12root@OpenWrt:~# md5sum /tmp/opboot-p2w-r619ac-flash-v1.0.8.binc3c0efd25aa18ee505debb3a90d75fe3 /tmp/opboot-p2w-r619ac-flash-v1.0.8.bin opboot-p2w-r619ac-flash-v1.0.8.bin 的 md5 值是:c3c0efd25aa18ee505debb3a90d75fe3 ，如果对的上即可放心刷入。 刷写 OpBoot 到 Bootloader123456root@OpenWrt:~# mtd -r write /tmp/opboot-p2w-r619ac-flash-v1.0.8.bin BootloaderUnlocking Bootloader ...Writing from /tmp/opboot-p2w-r619ac-flash-v1.0.8.bin to Bootloader ... Rebooting ... 注意: 此处 Rebooting… 并不会自动退出，想要知道是否重启完，浏览器直接访问 192.168.1.1 如果能访问 OpenWrt 的登录界面则表示已经重启完成。此时你可以手动关闭电脑的终端模拟器了 进入 OpBoot先拔掉路由器的电源，长按路由器背面的 reset 按键（ 不要松开 ），然后重新插上电源，直到 跑马灯跑完 （即 LAN的 指示灯4，3，2，1 依次闪过，最后LAN口的指示灯全亮，过后又熄灭），这时就可以松 reset 键了。然后浏览器直接访问 192.168.1.1 ，这样就能进入 OpBoot 了。 备份ART主界面下点击 「 高级功能 」 -&gt; 「 数据备份 」 -&gt; 「 执行 」 ，浏览器会将 art.bin 自动下载到你的电脑上。 备份编程器固件刷新下浏览器然后在 「 备份分区 」 处选择 编程器固件 ，然后再点击 「 执行 」 ，浏览器会将 all.bin 自动下载到你的电脑上。 更新 OpenWrt 固件 注意: 你可以在之前刷入的 OpenWrt 管理界面里更新固件，当然你也可以继续留在 OpBoot 更新固件。 返回 OpBoot 主菜单 「 浏览文件 」 ，选中需要使用的 OpenWrt 固件 ( openwrt-ipq40xx-R9.11.23-p2w_r619ac-squashfs-nand-sysupgrade.bin ) ，然后点击更新即可。 浏览器重新访问 192.168.1.1 ，如果访问的是 OpenWrt 的登录界面即表示更新完成。 注意: 密码默认是 password 输入密码登录成后即可进入 OpenWrt 的主界面 建议执行一次重置。 「 系统 」 -&gt; 「 备份/升级 」 「 执行重置 」 确认重置 重置完后浏览器会重新回到 OpenWrt 的登录界面。 美化 OpenWrt 的管理界面默认的 OpenWrt 主题很是复古，这里我要介绍的是我很喜欢的一个主题，名字叫做 luci-theme-argon 操作实例 点击此处跳转到主题包release页面，下载最新版本的 *.ipk 文件即可 重新接受路由器的密钥 注意: 因为路由器前面经过重置，所以路由器的密钥会发生改变，所以我们需要在电脑上执行 ssh-keygen -R hostname_or_ip 来移除原有属于路由器的密钥，当再次连接路由器时重新接受路由器的密钥即可。如果不执行此操作将无法建立连接。 使用 man ssh-keygen 命令可以查看下ssh-keygen命令的详细用法: 123456789名称 ssh-keygen - 生成、管理和转换认证密钥........................................................................................................................ -R hostname 从 known_hosts 文件中删除所有属于 hostname 的密钥。 这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥...................................................................................................................... 1234[eric@arch ~]$ ssh-keygen -R 192.168.1.1# Host 192.168.1.1 found: line 8/home/eric/.ssh/known_hosts updated.Original contents retained as /home/eric/.ssh/known_hosts.old 将主题包文件复制到路由器，电脑上打开终端模拟器，执行以下命令: 1234567[eric@arch ~]$ scp &#x27;/home/eric/Downloads/luci-theme-argon_1.3-01-20191111_all.ipk&#x27; root@192.168.1.1:/tmpThe authenticity of host &#x27;192.168.1.1 (192.168.1.1)&#x27; can&#x27;t be established.RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#x27;192.168.1.1&#x27; (RSA) to the list of known hosts.root@192.168.1.1&#x27;s password: luci-theme-argon_1.3-01-20191111_all.ipk 100% 1138KB 2.9MB/s 00:00 登录到路由器: 123456789101112131415[eric@arch ~]$ ssh root@192.168.1.1root@192.168.1.1&#x27;s password: BusyBox v1.30.0 () built-in shell (ash) _______ ________ __ | |.-----.-----.-----.| | | |.----.| |_ | - || _ | -__| || | | || _|| _| |_______|| __|_____|__|__||________||__| |____| |__| W I R E L E S S F R E E D O M ----------------------------------------------------- OpenWrt SNAPSHOT, r1673-ea47656 -----------------------------------------------------root@OpenWrt:~# 使用 opkg 安装主题包 luci-theme-argon 1234567root@OpenWrt:~# opkg install /tmp/luci-theme-argon_1.3-01-20191111_all.ipkInstalling luci-theme-argon (1.3-01-20191111) to root...Configuring luci-theme-argon.uci: Entry not founduci: Entry not founduci: Entry not foundroot@OpenWrt:~# 这个时候再用浏览器访问 192.168.1.1 ，就已经是应用了新主题啦。 到这里教程也算是结束了，后续的配置就与本教程无关了。 后续更新（OpBoot 1.0.9 + 128 MB OpenWrt） 文件名 md5sum 描述 下载 opboot-p2w-r619ac-flash-v1.0.9.bin c7d6d14b04d055bf27dad9d9c5d58c7d OpBoot 文件，用命令刷入 链接 opboot-p2w-r619ac-nor-v1.0.9.img 1eec34ed68043cc601b9a0225a1a3502 OpBoot 文件，在 OpBoot 里更新刷入 链接 openwrt-ipq40xx-p2w_r619ac-128MB-squashfs-nand-factory.ubi 0083bbf4b6a5eaf1beb896518f4d6057 OpenWrt 固件，在 OpBoot 里刷入 链接 MEGA 网盘下载链接: https://mega.nz/#F!hVgXjACA!CISFW8tyoKLCWs6RbC23LQ 推荐 使用梯子在 MEGA 网盘下载相关文件，当然您也可以直接点击表格中的链接下载。 OpBoot 升级说明竞斗云 2.0 的 NAND 闪存大小是 128 MB，但前期的 OpBoot 仅支持 64 MB 大小，相应的 OpenWrt 固件也是 64 MB 的，也就是说实际可用的空间仅 64 MB。自从 OpBoot 升级至 1.0.9 之后即可支持竞斗云 2.0 的 128 MB 的 NAND 闪存。 注意: 切勿混刷 opboot-p2w-r619ac-flash-v1.0.9.bin 和 opboot-p2w-r619ac-nor-v1.0.9.img，xxxflashxxx.bin 那个仅通过命令刷入，xxxnorxxx.img 那个则通过 OpBoot 内置的更新功能刷入。自己选错刷入固件后果自负~ 下面是更新到 OpBoot 1.0.9 的步骤说明 (有 2 种方法) ： 方法 1使用前面通过 scp 命令将 OpBoot 1.0.9 固件 ( opboot-p2w-r619ac-flash-v1.0.9.bin ) 上传至路由器的 /tmp 目录下，ssh 登录到路由器的 shell 然后执行下面的命令刷入即可(事前 请先校验 文件的md5值是否匹配): 1root@OpenWrt:~# mtd -r write /tmp/opboot-p2w-r619ac-flash-v1.0.9.bin Bootloader 方法 2您也可以通过 OpBoot 内置的更新功能刷入 opboot-p2w-r619ac-nor-v1.0.9.img 。通过如下操作刷入： 首先让路由器进入 OpBoot (怎么进入就不多说了，自己翻一翻前面的描述)，然后点击 OpBoot 的右上角的 「 高级功能 」 -&gt; 「 更新OpBoot 」 ，找到 opboot-p2w-r619ac-nor-v1.0.9.img 更新即可。 OpenWrt 128 MB 分区固件刷入说明经过前面刷入 OpBoot 1.0.9 之后，您就可以刷入 128 MB 分区的 OpenWrt 了。更新 128 MB 的固件后，你就可以使用之前 64 MB 分区的固件所无法利用的空间了，也就是说你可以用更多的空间装路由器的插件啦。 因为需要重建 ubi 分区，所以更新过程需要通过 OpBoot 1.0.9 版本刷入 ubi 固件 ( 即 openwrt-ipq40xx-p2w_r619ac-128MB-squashfs-nand-factory.ubi ) 所以你只需要让路由器进入 OpBoot ，然后直接选择 128 MB 分区的 ubi 固件更新就完成了。 鸣谢最后，得在此感谢 mleaf 大佬提供的 OpBoot 和 lean 大佬提供的 OpenWrt 固件，同时我还要感谢那些我参考的文章作者。如果没有他们的努力成果，也就没有这篇文章的诞生啦 参考链接: 竞斗云2.0（R619AC）OpBoot1.0.6刷机教程 【Router】G-DOCK 竞斗云2.0 小白刷机教程","categories":[{"name":"Router","slug":"Router","permalink":"https://ericclose.github.io/categories/Router/"}],"tags":[{"name":"刷机","slug":"刷机","permalink":"https://ericclose.github.io/tags/%E5%88%B7%E6%9C%BA/"},{"name":"固件","slug":"固件","permalink":"https://ericclose.github.io/tags/%E5%9B%BA%E4%BB%B6/"},{"name":"竞斗云","slug":"竞斗云","permalink":"https://ericclose.github.io/tags/%E7%AB%9E%E6%96%97%E4%BA%91/"},{"name":"R619AC","slug":"R619AC","permalink":"https://ericclose.github.io/tags/R619AC/"},{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://ericclose.github.io/tags/OpenWrt/"},{"name":"OpBoot","slug":"OpBoot","permalink":"https://ericclose.github.io/tags/OpBoot/"}]},{"title":"在 VMware Workstation 上 安装 Arch Linux （ UEFI + GPT ）","slug":"Installing-Arch-as-a-guest-with-UEFI-and-GPT","date":"2019-11-01T07:31:02.000Z","updated":"2020-09-29T09:54:29.487Z","comments":true,"path":"Installing-Arch-as-a-guest-with-UEFI-and-GPT.html","link":"","permalink":"https://ericclose.github.io/Installing-Arch-as-a-guest-with-UEFI-and-GPT.html","excerpt":"以下使用 VMware Workstation 来安装 Arch Linux，全程以图解方式来讲解Arch Linux安装的过程。","text":"以下使用 VMware Workstation 来安装 Arch Linux，全程以图解方式来讲解Arch Linux安装的过程。 下载 Arch Linux 的镜像文件下载链接：https://www.archlinux.org/download/ 下载 VMware Workstation下载链接：https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.0-14665864.exe 注意：该软件为商业付费软件，请自行购买许可。（当然如果没有钱钱的话，去网上搜索 VMware Workstation 15 Pro永久激活密钥 即可。小声~ 本文假定您已下载完 Arch Linux 的镜像文件以及安装和激活了 VMware Workstation。 VMware Workstation 配置 「 创建新的虚拟机 」 「 典型安装 」 &gt; 「 下一步 」 「 安装光盘映像文件 」 &gt; 「 浏览 」找到下载好的镜像文件 &gt; 「 下一步 」 「 Linux 」 &gt; 选择「 版本 」，「 其他Linux 5.x或更高版本内核64位 」 &gt; 「 下一步 」 修改「 虚拟机名称 」 &gt; 「 下一步 」 「 最大磁盘大小 」设为 40 GB &gt; 「 将虚拟硬盘存储为单个文件 」，有助于提高运行性能 &gt; 「 下一步 」 「 自定义硬件 」 &gt; 「 内存 」 &gt; 「 虚拟机内存大小 」设为 3072 MB 。 （我实体机内存大小 8 GB，所以虚拟机给个 3 GB还是可以的） 「 显示 」 &gt; 「 加速3D图形 」 「 处理器数量（number of processors） 」 和 「 每个处理器的核心数量（number of cores per processor） 」的选择。 处理器数量：指 物理核心数 。 每个处理的核心数量：指每个物理核心数所拥有的 逻辑核心数 。 处理器核心总数 (total processor cores)：前面两者之积。 与平常所说的处理器是x核x线程的关系如图： 正如我电脑的处理器是 Intel(R) Core(TM) i5-8250U ，是4核8线程的。 那么现在问题来了，「 处理器数量 」 和 「 每个处理器的核心数量 」该怎么填写呢。 如果配置与物理机相同的总核数，其性能可达到90%左右； 总核数相同的情况下，处理器数量分配越少，每个处理器的核心数越多，虚拟机的单处理器性能会显著提高，但是总性能会有所下降； 反之，处理器数量分配越多，每个处理器的核心数越少，虚拟机的单处理器性能会有所下降，但是总性能会有所提升。 想要看相关细节，请看引用的内容来源：https://www.jianshu.com/p/da8443f482e9 综上所述，只要「 处理器核心总数 」与物理机具有相同的总核数就可以达到可观的性能，所以我这里「 处理器数量 」 和 「 每个处理器的核心数量 」的值分别设置为 4 和 2 。 「 虚拟机 」 &gt; 「 设置 」 「 选项 」 &gt; 「 高级 」&gt; 「 UEFI 」 &gt; 「 OK 」 至此，VMware Workstation 的配置告一段落。 开启虚拟机 开机，UEFI 成功启动以后像这样 直接选择第一项「 Arch Linux archiso x86_64 UEFI CD 」，回车即可 然后等待一会以后，出现 这就是说已经正常启动到 Arch Linux 的 Live CD 环境啦。 安装 Arch Linux 的全过程联网 确保系统已经启用了网络接口，用 ip link 检查 1root@archiso ~ # ip link 使用 dhcpcd 联网 1root@archiso ~ # dhcpcd 确保联网，能 ping 通 baidu.com 即可（百度最佳的作用就是测试网络是否可用了，其他的没啥了，ε=ε=ε=┏(゜ロ゜;)┛ 逃）。VMware Workstation 默认使用 NAT，只要宿主机能联网，通常虚拟机内也可以直接联网的。用 ping 检查网络连接 1root@archiso ~ # ping -c 4 baidu.com -c 选项：用于指定 ping 的次数 时间同步1root@archiso ~ # timedatectl set-ntp true 正确的（误差之内的）时间在验证连接或证书的可信程度时非常重要，例如 HTTPS 和 GnuPG 都需要准确的时间来验证证书的有效性。 准备磁盘分区分区示例本文只针对 UEFI with GPT 启动方式，并基于最简单的硬盘结构，采用最简单的分区策略。（其中 SWAP 分区可选，我这里 SWAP 的大小就直接是虚拟机内存大小乘以2） UEFI with GPT 挂载点 分区 分区类型 大小 /mnt/boot /dev/sda1 EFI system partition 512 MiB [SWAP] /dev/sda2 Linux swap (交换空间) 6 GiB /mnt /dev/sda3 Linux x86-64 根目录 (/) 剩余空间 fdisk 和 分区操作 显示所有分区 1root@archiso ~ # fdisk -l 其中 /dev/sda 是虚拟机上的硬盘 开始分区 1root@archiso ~ # fdisk /dev/sda 进入分区程序。输入 m 可以查看 fdisk 的帮助。在决定写入之前，所有的更改都不会被保存。 按照上面描述的分区示例，我们输入 g 新建一个 空的 GPT 分区表； 输入 n 建立第一个分区，首先会问你选择分区号（默认是可用的最小分区号）， 回车 即可； 不用填写 first sector（默认值为可用的最小扇区号），直接 回车 ，在提示输入 last sector 的时候输入 +512M 来依据分区大小自动计算终止扇区。 完成上图的操作后即得到一个512 MB 大小的分区。 重复上面的步骤，再建立一个 6 GB 大小（或你自己决定 SWAP 分区的大小，当然你也可以不创建 SWAP 分区）的分区；最后重复上面的步骤，但最后一次不填写 last sector 从而自动将所有的剩余空间划分给第三个分区。如下图： 修改分区类型 按 t ，会询问需要修改的分区号，然后则是询问你要修改的类型（按 L 会列出各个分区类型的编号），编号 1 是 EFI System Partition ，编号 19 是 swap ，分区3的类型不做修改（默认的分区类型是 Linux Filesystem）。 注意 ：最后要让建立的分区生效，需要输入 w 把分区表写入磁盘 显示 /dev/sda 上的分区（确认是否生效 ） 1root@archiso ~ # fdisk -l /dev/sda 格式化分区 和 设置 swap 分区123root@archiso ~ # mkfs.fat -F32 /dev/sda1root@archiso ~ # mkswap /dev/sda2root@archiso ~ # mkfs.ext4 /dev/sda3 Linux 对磁盘分区的命名也很直观。设备 /dev/sda 上的第一个分区就是 /dev/sda1 ，第二个分区就是 /dev/sda2 ，以此类推。 在上面的指令第一句中，我们为 /dev/sda1 分区，也就是 sda 磁盘的第一块分区，建立了 fat 文件系统；**-F32** 表明我们建立的是 fat32 而非 fat16 或其它不是我们想要的 fat。 UEFI规范要求对FAT12，FAT16和FAT32文件系统的支持，但是任何符合条件的供应商都可以选择添加对其他文件系统的支持。 例如，Apple macOS 中的固件支持 HFS+ 文件系统。 而在第二句中，我们为 /dev/sda2 创建了专用于 swap 的存储系统；这是一个特殊的分区类型，它很难被当作 filesystem，所以建立它的指令是 mkswap 而非 mkfs.* 。 启用交换分区 和 文件系统的挂载 启用交换分区 1root@archiso ~ # swapon /dev/sda2 可以使用 swapon –show 来检查交换分区有没有被正确启用。 然后挂载整个新系统的根，这里我们将它挂载到 Arch ISO 环境的 /mnt 下。不要担心，Linux 有一个实用工具 chroot，可以将目录结构的任意点作为新的根。 1root@archiso ~ # mount /dev/sda3 /mnt 按照我们对新系统目录结构的理解，**/dev/sda1** 应该被挂载于新系统的 /boot ，也就是 Arch ISO 环境的 /mnt/boot 。但是这个目录目前仍不存在，所以我们手动创建这个挂载点，然后再进行挂载。 12root@archiso ~ # mkdir /mnt/bootroot@archiso ~ # mount /dev/sda1 /mnt/boot 安装选择镜像源文件 /etc/pacman.d/mirrorlist 定义了软件包会从哪个 镜像源 下载。在 LiveCD 启动的系统上，所有的镜像源都被启用。 在 列表中越前 的镜像源在下载软件包时有 越高的优先权 。 这个文件接下来还会被 pacstrap 复制到新系统里，所以请确保正确设置。 注意 ：以下需要用到 vim 这个编辑器，建议先去自行学习一下 vim 的基本使用，不然我怕新手碰到这个编辑器会一脸懵逼，后面还会涉及到 vim 的相关操作哦。 vim 编辑 /etc/pacman.d/mirrorlist 1root@archiso ~ # vim /etc/pacman.d/mirrorlist 执行完上行命令后，键入 :set nu ，然后 回车 即显示行号，如图： 然后继续键入 /China ，然后 回车 搜索中国的源，光标会跳到相应字符串的行。如图： 键入 V （注意是 大写 的 V ,后面的相应字母都要认清楚大小写） 并移动光标进行选择，选中上图用红框括起来的2行，然后按 d 进行剪切，再按 6G 移动到文件的第 6 行，按 p 进行粘贴。 继续键入 :wq ，然后 回车 ，即保存并退出。 安装必须的软件包 使用 pacstrap 脚本，安装 base 软件包和 Linux 内核以及常规硬件的固件： 1root@archiso ~ # pacstrap /mnt base linux linux-firmware 装完前面的东西，只是装完能做到开机的必须组件而已，但还有一些必备的东西要装，比如说网络管理器 NetworkManager ， NetworkManager 是检测网络、自动连接网络的程序。无论是无线还是有线连接，它都可以令您轻松管理。这一步也是必备的一步： 1root@archiso ~ # pacstrap /mnt networkmanager 配置系统生成 fstab 文件fstab 文件可用于定义磁盘分区，包括各种块设备或者远程文件系统应该如何装入到文件系统。 1root@archiso ~ # genfstab -U /mnt &gt;&gt; /mnt/etc/fstab -U 选项指的是 使用UUID作为源标识符 arch-chroot arch-chroot bash 脚本是软件包 arch-install-scripts 的一部分，在运行 /usr/bin/chroot 前，这个脚本会挂载 /proc api 文件系统，建立可用的 /etc/resolv.conf 。 前文中提到过，chroot 工具能指定目录结构任意的位置为新的根；由于我们需要进行的配置应该在新系统上完成，所以我们应该 chroot 到新系统的根，也就是 /mnt。不过这里我们不是直接就使用 chroot ，而是通过镜像里提供的 arch-chroot 来完成额外的配置。 1root@archiso ~ # arch-chroot /mnt 设置时区 中国的时区是 Asia/Shanghai 1[root@archiso /]# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 您可以使用以下命令将硬件时钟设置为当前系统时间： 1[root@archiso /]# hwclock --systohc 在新安装的系统上安装 vim 编辑器 Vim 是从 vi 发展出来的一个文本编辑器。其代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和 Emacs 并列成为类Unix系统用户最喜欢的编辑器。 这里我们安装 vim ： 1[root@archiso /]# pacman -S vim Y 确认安装即可。 本地化 /etc/locale.gen 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，去掉对应行前面的注释符号（＃）就可以啦，还是用 vim 来编辑，建议选择 en_US.UTF-8 UTF-8 的项： 1[root@archiso /]# vim /etc/locale.gen 找到 #en_US.UTF-8 UTF-8 这一行，光标移动到开头的 “#” ，然后键入 x ，再键入 :wq 保存并退出即可。 接着执行 locale-gen 以生成 locale 讯息： 1[root@archiso /]# locale-gen 创建 locale.conf 文件，并相应地设置 LANG 变量： 1[root@archiso /]# echo LANG=en_US.UTF-8 &gt; /etc/locale.conf 网络配置 创建 hostname 文件: 1[root@archiso /]# echo YourNewHostname &gt; /etc/hostname 注意：YourNewHostname 是你要设置的主机名，名字任取。后面如果还出现，也指的是你取的主机名。 添加对应的信息到 hosts ： 1[root@archiso /]# vim /etc/hosts 键入 i 进入插入模式，编辑后得到的内容如下： 12345# Static table lookup for hostnames.# See hosts(5) for details.127.0.0.1 localhost::1 localhost127.0.1.1 YourNewHostname.localdomain YourNewHostname 填写完成后就键入 Esc 键，退回命令模式，再键入 :wq 保存并退出。 NetworkManager 服务 将 NetworkManager 服务设为开机自启： 1[root@archiso /]# systemctl enable NetworkManager 设置 root 用户密码执行 passwd 命令修改当前用户（即 root 用户）的密码。 注意 ：密码输入时不可见，反正输入完后只管回车就行，第二次输入密码是系统要你确认密码。 1234[root@archiso /]# passwdNew password:Retype new password:passwd: password updated successfully 安装引导程序 启动加载器是 BIOS 或 UEFI 启动的第一个程序。它负责使用正确的内核参数加载内核, 并根据配置文件加载初始化 RAM disk。 注意 ：这一步相当重要，如果没有配置正确的话，你重启后将无法正常启动到系统。 systemd-boot (以前被称为gummiboot) 是可以执行 EFI 镜像文件的简单 UEFI 启动管理器。启动的内容可以通过一个配置(glob)或者屏幕菜单选择。Arch 默认安装的 systemd 提供了这个功能。配置很简单，但是只能启动 EFI 可执行程。 安装 EFI 启动管理器 1[root@archiso /]# bootctl --path=/boot install –path= 后面接的就是我们一开始创建的 esp (EFI system partition) 的挂载路径 基本配置 基本设置保存在 /boot/loader/loader.conf ,有三个选项： default – 默认加载的配置文件 (不含 .conf 后缀)。 timeout – 启动选单的超时时间,如果不设置的话,启动选单只有在按键时才显示。 editor - 是否允许用户编辑内核参数. yes 是允许, no 是阻止。 用 vim 编辑 /boot/loader/loader.conf ： 1[root@archiso /]# vim /boot/loader/loader.conf 下面是我编辑好的 /boot/loader/loader.conf ，内容如下: 1234default archtimeout 4console-mode maxeditor no 添加启动选项 前面我们不是已经在 /boot/loader/loader.conf 中的选项指定了一个 default 选项嘛，所以我们现在就来配置一下这个默认启动选项。 我们要编辑的配置文件是 /boot/loader/entries/arch.conf 同样也是用 vim 来编辑： 1[root@archiso /]# vim /boot/loader/entries/arch.conf 下面是我暂时编辑好的 /boot/loader/entries/arch.conf ，内容如下: 1234title Arch Linuxlinux &#x2F;vmlinuz-linuxinitrd &#x2F;initramfs-linux.imgoptions root&#x3D;PARTUUID&#x3D; 保存并退出编辑后，我们执行一下这么一行命令： 1[root@archiso /]# blkid -s PARTUUID -o value /dev/sda3 &gt;&gt; /boot/loader/entries/arch.conf 上面的命令将会把根分区的UUID的值追加到 /boot/loader/entries/arch.conf 的最后一行。则文件 /boot/loader/entries/arch.conf 的内容现在为（注意 ：PARTUUID的值都是因人而异的）： 12345title Arch Linuxlinux &#x2F;vmlinuz-linuxinitrd &#x2F;initramfs-linux.imgoptions root&#x3D;PARTUUID&#x3D;14420948-2cea-4de7-b042-40f67c618660 最后一次用 vim 编辑 /boot/loader/entries/arch.conf ，完成编辑后的文件内容如下： 1234title Arch Linuxlinux &#x2F;vmlinuz-linuxinitrd &#x2F;initramfs-linux.imgoptions root&#x3D;PARTUUID&#x3D;14420948-2cea-4de7-b042-40f67c618660 rw 重启系统根据前面所有的步骤走完一遍，也算是配置好了，让我们重启吧： 首先 exit 退回到 Arch ISO 环境： 1[root@archiso /]# exit 然后执行命令重启： 1root@archiso ~ # systemctl reboot 开机后会有个标题为 “Arch Linux” 的启动选项，即是我们之前添加的选项。 成功进入系统后，就会让你登陆了，当然一开始只有root用户，密码也是你之前设置的那个，输入密码的时候依然不会显示出来。 可选配置更新系统和软件包一个 pacman 命令就可以升级整个系统。花费的时间取决于系统有多老。这个命令会同步非本地(local)软件仓库并升级系统的软件包 1[root@arch ~] # pacman -Syu 用户与权限配置 正经的 Linux 用户不会用 root 干所有的事情，如果这么做的话将会很危险。创建一个普通的用户，并让它可以通过 sudo 指令用 root 权限执行命令是一般的解决方案。 在用 sudo 之前，我们需要先安装 sudo 这个软件包： 1[root@arch ~] # pacman -S sudo 配置 sudoers 执行 visudo 来修改 /etc/sudoers 文件。使用它的好处是，它会在保存时作语法检查，以避免错误的更改使 sudo 彻底不可用。 1[root@arch ~] # EDITOR=vim visudo 此处通过环境变量 EDITOR 来声明使用 vim 来编辑文件，默认的情况下 visudo 是用 vi 来编辑的。（vi 和 vim 的用法略有不同） 找到这一行： 1# %wheel ALL&#x3D;(ALL) ALL 去掉找到的那一行开头的注释，即 # 和 空格 ，不要误删掉 % 哦。弄完之后保存即可，得： 1%wheel ALL&#x3D;(ALL) ALL 去掉注释的作用：取消注释以允许 wheel 组成员执行任何命令。 添加一个 wheel 组普通用户 1[root@arch ~] # useradd -m -G wheel 你想要取的用户名 用户名必须是合法的。最简单的就是 不带空格的字母 和 数字 的组合。 -m 参数表示同时创建该用户的家目录，这会被默认置为 /home/用户名。 -G wheel 表示同时将该用户加入 wheel 用户组。 设置普通用户的密码 1[root@arch ~] # passwd 用户名 完成上述操作之后，注销当前用户之后就可以登录我们新建的普通用户了。 Ctrl + d 退出账户 重新登陆你新建的普通账户。 登录完你会发现，之前的用户名不是 root 而是我创建的一个叫做 admin 的用户， # 也变成了 $ ，这就意味着这是普通用户。 VMware 相关软件包和服务 安装 VMware Tools 是创建新的虚拟机过程的一部分，而升级 VMware Tools 是使虚拟机符合最新标准过程的一部分。尽管客户机操作系统在未安装 VMware Tools 的情况下仍可运行，但许多 VMware 功能只有在安装 VMware Tools 后才可用，如虚拟机显示器填满屏幕，宿主机和虚拟机之间拖拽或复制粘贴文件等。 open-vm-tools : VMware Tools 的开源实现 安装 open-vm-tools 注意 ：如遇安装失败，请再试一次。 1[admin@arch ~]$ sudo pacman -S open-vm-tools vmtoolsd : 负责汇报虚拟机状态的服务 vmware-vmblock-fuse : 文件系统实用程序。 通过FUSE（用户空间中的文件系统）实现宿主 / 虚拟机之间拖拽文件。 将 vmtoolsd 和 vmware-vmblock-fuse 两个服务设为开机自启 1[admin@arch ~]$ systemctl enable vmtoolsd vmware-vmblock-fuse gtkmm3 : 如要启用客户机的拖拽与复制粘贴功能，则需要安装 gtkmm3 安装 gtkmm3 1[admin@arch ~]$ sudo pacman -S gtkmm3 xf86-input-vmmouse : VMWare鼠标输入驱动程序 xf86-video-vmware : vmware显示驱动程序，如果想要让虚拟机显示器填满屏幕，就必须要安装这个软件包 mesa : OpenGL规范的开源实现 安装相关驱动 1[admin@arch ~]$ sudo pacman -S xf86-input-vmmouse xf86-video-vmware mesa 安装桌面环境显示服务 X 窗口管理系统 ( X11 或者 X ) 是基于网络的显示协议，提供了窗口功能，包含建立图形用户界面(GUI)的标准工具和协议。 Xorg 是 X 窗口的开源实现，提供图形用户界面。 Wayland 是一种更新的可用显示服务协议， Weston 是其参考实现。 这里我安装 xorg ： 1[admin@arch ~]$ sudo pacman -S xorg 桌面环境 尽管 Xorg 提供了用于构建图形环境的基本框架，但是为了获得完整的用户体验，可能还需要其他组件。 GNOME，KDE，LXDE 和 Xfce 等桌面环境将各种 X 客户端捆绑在一起，例如窗口管理器，面板，文件管理器，终端仿真器，文本编辑器，图标和其他实用程序。 plasma-meta : 用以安装 KDE Plasma 的元软件包 我个人偏好 kde，所以执行下面的命令： 1[admin@arch ~]$ sudo pacman -S plasma-meta 显示管理器 大多数桌面环境都包括一个显示管理器，用于自动启动图形环境和管理用户登录。 sddm : 基于QML的X11和Wayland显示管理器 安装 sddm ： 1[admin@arch ~]$ sudo pacman -S sddm 将 sddm 服务设为开机自启： 1[admin@arch ~]$ systemctl enable sddm 重启虚拟机 1[admin@arch ~]$ systemctl reboot 登录图形界面就这样，我们开机了，此时虚拟机的显示区域已经能填满我们宿主机的屏幕了： 输入密码登录即可。 修改系统显示缩放 在较小尺寸下却拥有较高分辨率的显示器，进入桌面环境后，如果你发现系统的字体和图标等等显得非常小，那么你就必须要设置显示缩放了。 如何判断大概怎样的缩放比例才合适呢？最简单的方法就是回到你的 Windows 宿主机，在宿主机桌面空白处「鼠标右键」 &gt; 「显示设置」 &gt; 「缩放和布局」，数值为 150% ，即缩放比例为 1.5x 。 这时，我们再回到虚拟机这边： 「 开始菜单 」 &gt; 「 System Settings 」 &gt; 「 Display Configuration 」 &gt; 「 Global scale 」，下面有一个可拖动的条，拖至 1.5x 的位置（这里拖拽的位置取决于你 Windows 的「 缩放和布局 」的取值），然后我们点击 「 Apply 」 应用。 最后我们在 「 开始菜单 」 &gt; 「 Leave 」 &gt; 「 Restart 」 重启一下虚拟机以让显示缩放生效，到这里我们就算是解决完系统显示缩放的问题了。 安装终端模拟器等等，前面我们装完 kDE 是不是忘了安装什么东西，我们在桌面环境里怎么输入命令呢？这就需要我们安装 终端模拟器（Terminal Emulator） 了 终端模拟器有很多，这里就举几个经典的例子： GNU/Linux：gnome-terminal、Konsole； macOS：Terminal.app、iTerm2； Windows：Win32 控制台、ConEmu 等等 在正式安装之前，建议先去看看这么一篇文章：命令行界面 (CLI)、终端 (Terminal)、Shell、TTY，傻傻分不清楚？ 然后这里我要安装的终端模拟器是 deepin-terminal （属于Deepin的默认终端仿真应用程序，源码仓库地址：https://github.com/linuxdeepin/deepin-terminal ，我选择这个的原因是因为它开源，而且无需任何配置就已经很美观了，还有一点就是不会有 konsole 在系统显示缩放比例为 小数倍 时随机出现横线或竖线的 bug。）在安装终端模拟器之前，我们需要按下 Ctrl + Alt + F2 切换至 tty2 ，登录，然后输入命令： 1[admin@arch ~]$ sudo pacman -S deepin-terminal 安装完之后，我们按下 Ctrl + Alt + F1 切换回桌面环境。这时我们就可以在「 开始菜单 」找到 deepin-terminal 了。 由于 deepin-terminal 默认的主题配色（绿色）我不喜欢，所有我换了另一个。如图： 安装中文字体 在没安装中文字体之前，系统是无法正常显示中文的，大概就是会显示 口口口口 。所以这里推荐安装下 Google Noto Fonts 系列：noto-fonts-sc 和 noto-fonts-emoji 打开终端模拟器，执行下面的命令安装 noto-fonts-sc 和 noto-fonts-emoji ： 12345sudo pacman -S base-devel gitgit clone https://aur.archlinux.org/noto-fonts-sc.gitcd noto-fonts-scmakepkg -sisudo pacman -S noto-fonts-emoji 安装中文输入法 前面系统已经能正常显示中文了，但是我们却仍无法输入中文。因为还没有安装中文输入法。 输入法（IM）是一种输入特定字符和符号集的方法，通常是因为键盘不直接输入它们。大多数输入法是输入法框架的一部分，它使用户可以轻松地在多种输入法之间切换。Linux 下有两种主流的输入法框架，ibus 和 fcitx ，对于 KDE 来说， fcitx 是比较好的选择。 使用下面的指令安装 fcitx ： fcitx-im ：软件包组，包含 fcitx 本身，和让 fcitx 能正常运行在各版本 qt 和 gtk 程序里的组件（ fcitx-gtk2 、 fcitx-gtk3 、 fcitx-qt5 ） 1[admin@arch ~]$ sudo pacman -S fcitx-im fcitx 提供有一个集成到 KDE 系统设置内的 fcitx 设置程序 ( kcm-fcitx )，输入下面的指令安装 fcitx 的 GUI 配置工具： 1[admin@arch ~]$ sudo pacman -S kcm-fcitx 安装完 fcitx 输入法框架后，我们来具体安装一个叫做 rime 的输入法，输入下面的指令安装即可： 1[admin@arch ~]$ sudo pacman -S fcitx-rime 此时我们仍不能正确输入中文。因为我们还未配置环境变量来让程序们使用 fcitx。创建或修改 ~/.pam_environment 文件，用它来指定环境变量。 用 vim 编辑 ~/.pam_environment 1[admin@arch ~]$ vim ~/.pam_environment 在里面加上如下内容 123GTK_IM_MODULE&#x3D;fcitxQT_IM_MODULE&#x3D;fcitxXMODIFIERS&#x3D;@im&#x3D;fcitx 它们会指定 fcitx 为几乎所有程序的 IM。当然某些不听话的程序除外，比如 Sublime，但这类程序几乎遇不到。 重启系统 1[admin@arch ~]$ systemctl reboot 添加 rime 输入法 「 开始菜单 」 &gt; 「 System Settings 」 &gt; 「 Personalization 」 一栏下面的 「 Regional Settings 」 &gt; 「 Input Method 」，取消勾选 「Only Show Current Language」 &gt; 「 Rime 」 &gt; 「 &gt; 」 &gt; 「 Apply 」 应用生效。如图： 移除默认的 Keyboard - English (US) 「Keyboard - English (US)」 &gt; 「**&lt;**」 &gt; 「Apply」 应用生效。如图： 等待 Rime 维护至就绪即可使用 rime 输入法了。 修改繁体输入为简体输入。你可以这么做： 在可输入区域（如 terminal等），按下 F4 ，然后会有个 方案选单 。 我们按 1 键 然后我们再选 4 键 弄完这个以后输入的中文就是简体的了。 如果要中英文的切换，我们只需要通过 Shift 键就可了。 安装浏览器浏览器我个人喜欢用 Chromium ，直接用 pacman 安装就是了： 1[admin@arch ~]$ sudo pacman -S chromium 安装 shadowsocks-qt5 shadowsocks-qt5 : 快速，可靠且跨平台的 Shadowsocks 的 GUI 客户端。 Arch Linux 的仓库里有 shadowsocks-qt5 ，直接安装即可： 1[admin@arch ~]$ sudo pacman -S shadowsocks-qt5 下载机场的 shadowsocks 配置文件： 导入 shadowsocks 配置文件： 连接可用的机场节点，并记住本地的端口号： 设置系统代理 「 开始菜单 」 &gt; 「 System Settings 」 &gt; 「 Network 」 &gt; 「 Settings 」 &gt; 勾选 「 Use manually specified proxy configuration 」 在 「 Socks Proxy 」 里填写 socks5://127.0.0.1 ，其中 「Port」 为 1080 ，就是我之前让你记住的本地端口号。在 「 Exceptions 」 里填写 localhost,127.0.0.0/8,::1 。最后点击 「 Apply 」，应用即可。 如果要关掉代理，就勾选 「 No Proxy 」 再 「 Apply 」 应用即可，然后断开shadowsocks的连接就好了。 安装文件管理器这里我就不多赘述了，文件管理器我选择 dolphin ，用 pacman 安装即可： 1[admin@arch ~]$ sudo pacman -S dolphin 安装归档管理器 engrampa: 可视化解压缩软件 其余均为依赖，安装这些软件包后 engrampa 才能解压缩 7z、rar、zip 格式的压缩包 用 pacman 安装即可： 1[admin@arch ~]$ sudo pacman -S p7zip unrar zip unzip engrampa 安装完后的 装逼只需要先安装 neofetch 即可 1[admin@arch ~]$ sudo pacman -S neofetch 然后直接在 terminal 输入： 1[admin@arch ~]$ neofetch 没错，你应该不止一次看到过类似这样的一张图，这就是信仰啊~ （ 😀","categories":[{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/categories/Linux/"}],"tags":[{"name":"VMware","slug":"VMware","permalink":"https://ericclose.github.io/tags/VMware/"},{"name":"Arch","slug":"Arch","permalink":"https://ericclose.github.io/tags/Arch/"}]},{"title":"StarUML 3 破解","slug":"StarUML-3-registration","date":"2019-09-18T07:00:42.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"StarUML-3-registration.html","link":"","permalink":"https://ericclose.github.io/StarUML-3-registration.html","excerpt":"导语：尽管不注册StarUML也不会有使用时间的限制，但是时不时的弹窗请求注册就让人很闹心，而且不注册的话导出的图片会带水印，再加上官网高昂的费用… 于是乎此文就此产生。","text":"导语：尽管不注册StarUML也不会有使用时间的限制，但是时不时的弹窗请求注册就让人很闹心，而且不注册的话导出的图片会带水印，再加上官网高昂的费用… 于是乎此文就此产生。 事先准备 StarUML 首先下载好 StarUML，然后双击安装包，它会自己安装到 C:\\Program Files\\StarUML ，而且没法选择更改安装路径… Node.js 首先下载LTS版（长期支持版） Node.js ，安装选项全部默认，一路点击Next。最后安装好之后，cmd 输入 node -v 和 npm -v ，如果出现版本号，那么就安装成功了。 注册过程 安装 asar ，以 管理员模式 运行cmd，输入命令： 1npm install -g asar 切换工作目录到 C:\\Program Files\\StarUML\\resources ，输入命令： 1cd /d &quot;C:\\Program Files\\StarUML\\resources&quot; 解包 app.asar ，输入命令： 1asar extract app.asar app 将 app.asar 重命名为 app.asar.bak ，即输入命令： 1rename app.asar app.asar.bak 使用你喜欢的 带语法高亮 的编辑器修改 C:\\Program Files\\StarUML\\resources\\app\\src\\engine\\license-manager.js 这个文件 注 ：如图找到 checkLicenseValidity () &#123; ... &#125; 这一块代码，修改为这样： license-manager.js123456789checkLicenseValidity () &#123; this.validate().then(() =&gt; &#123; setStatus(this, true) &#125;, () =&gt; &#123; // setStatus(this, false) &lt;- 注释这一行（其中&quot;//&quot;用于注释） // UnregisteredDialog.showDialog() &lt;- 注释这一行（其中&quot;//&quot;用于注释） setStatus(this, true) // &lt;- 添加这一行 &#125;)&#125; 修改完后现在可以重新打包了，输入命令： 1asar pack app app.asar 就这样完成了一切的工作。","categories":[{"name":"Crack","slug":"Crack","permalink":"https://ericclose.github.io/categories/Crack/"}],"tags":[{"name":"破解","slug":"破解","permalink":"https://ericclose.github.io/tags/%E7%A0%B4%E8%A7%A3/"},{"name":"StarUML","slug":"StarUML","permalink":"https://ericclose.github.io/tags/StarUML/"}]},{"title":"使用 Office 部署工具安装 Visio 2016（KMS激活）","slug":"use-the-ODT-to-install-VOL-ed-of-Visio-2016","date":"2019-08-26T05:29:59.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"use-the-ODT-to-install-VOL-ed-of-Visio-2016.html","link":"","permalink":"https://ericclose.github.io/use-the-ODT-to-install-VOL-ed-of-Visio-2016.html","excerpt":"本文教你学习如何使用 Office 部署工具来安装 Visio 2016 的KMS版本（批量许可版本）","text":"本文教你学习如何使用 Office 部署工具来安装 Visio 2016 的KMS版本（批量许可版本） 从 Microsoft 下载中心下载Office 部署工具。 双击下载的工具，如下图，勾选“Click here to…”，点击“Continue”； 该工具会解压得到一些文件（setup.exe和*.xml），如下图所示，选择解压的目录。 在解压得到的目录下删除所有xml文件。 创建要与 Office 部署工具一起使用的 configuration.xml 文件以下载和安装 Visio 的VOL版本。 configuration.xml 的内容如下： 1234567&lt;Configuration&gt; &lt;Add OfficeClientEdition=&quot;64&quot; &gt; &lt;Product ID=&quot;VisioProXVolume&quot; PIDKEY=&quot;69WXN-MBYV6-22PQG-3WGHK-RM6XC&quot;&gt; &lt;Language ID=&quot;zh-cn&quot; /&gt; &lt;/Product&gt; &lt;/Add&gt; &lt;/Configuration&gt; 在这个目录下，按住Shift键（不要松）然后鼠标右键 打开powershell 开始下载 Visio。输入命令为： 1.\\setup.exe /download configuration.xml 下载完成后，powershell会再次等待输入，这是输入命令安装Viso： 1.\\setup.exe /configure configuration.xml 以 管理员权限 打开 cmd ，切换工作目录，命令如下： 1cd /d C:\\Program Files\\Microsoft Office\\Office16 添加KMS服务器 1cscript ospp.vbs /sethst:kms.03k.org 开始激活 1cscript ospp.vbs /act 大功告成","categories":[{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/categories/Windows/"}],"tags":[{"name":"Office","slug":"Office","permalink":"https://ericclose.github.io/tags/Office/"},{"name":"Visio","slug":"Visio","permalink":"https://ericclose.github.io/tags/Visio/"}]},{"title":"Fedora 30 安装 VMware Workstation","slug":"install-VMware-Workstation-on-Fedora-30","date":"2019-07-07T12:08:24.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"install-VMware-Workstation-on-Fedora-30.html","link":"","permalink":"https://ericclose.github.io/install-VMware-Workstation-on-Fedora-30.html","excerpt":"本文介绍了 Fedora 30 安装 VMware Workstation 全过程","text":"本文介绍了 Fedora 30 安装 VMware Workstation 全过程 下载 VMware Workstation 安装程序12cd ~/Downloadswget https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-15.0.4-12990004.x86_64.bundle 执行安装程序12chmod a+x VMware-Workstation-Full-15.0.4-12990004.x86_64.bundle./VMware-Workstation-Full-15.0.4-12990004.x86_64.bundle 接下来，根据终端上的提示进行安装即可。等安装完成后还不要急着启动，如果启动，将无法正常运行，会显示 Before you can run VMware several modules must be compiled and loaded into the running kernel ，所以这个时候就需要patch了。 安装依赖1sudo dnf install kernel-devel kernel-headers gcc gcc-c++ make git patch 过程注意根据您的 VMware Workstation 版本号，将下面命令里出现的“x.y.z”替换为您安装的版本号，比如说 15.0.4 查看vmware的版本号 1vmware -v 方法一（编译并安装）12345wget https://github.com/mkubecek/vmware-host-modules/archive/workstation-x.y.z.tar.gztar -xzf workstation-x.y.z.tar.gzcd vmware-host-modules-workstation-x.y.zmakesudo make install 方法二（替换原始的tarball，推荐）1234567wget https://github.com/mkubecek/vmware-host-modules/archive/workstation-x.y.z.tar.gztar -xzf workstation-x.y.z.tar.gzcd vmware-host-modules-workstation-x.y.ztar -cf vmmon.tar vmmon-onlytar -cf vmnet.tar vmnet-onlysudo cp -v vmmon.tar vmnet.tar /usr/lib/vmware/modules/source/sudo vmware-modconfig --console --install-all 运行经过 patch，这时再运行，就可以正常运行了。 参考资料： How to Resolve Issues for VMWORKSTATION and VMPLAYER (ANY KERNEL + ANY VERSION)","categories":[{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/categories/Linux/"}],"tags":[{"name":"Fedora","slug":"Fedora","permalink":"https://ericclose.github.io/tags/Fedora/"},{"name":"VMware","slug":"VMware","permalink":"https://ericclose.github.io/tags/VMware/"}]},{"title":"Fedora 30 编译安装 shadowsocks-qt5 全程","slug":"shadowsocks-qt5-for-Fedora-30","date":"2019-06-20T12:08:24.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"shadowsocks-qt5-for-Fedora-30.html","link":"","permalink":"https://ericclose.github.io/shadowsocks-qt5-for-Fedora-30.html","excerpt":"首先说一下，编译安装 shadowsocks-qt5 之前，有一个依赖包（即 libQtShadowsocks）不在 Fedora 的仓库里，这就是为什么我们还需要编译安装 libQtShadowsocks 的原因。","text":"首先说一下，编译安装 shadowsocks-qt5 之前，有一个依赖包（即 libQtShadowsocks）不在 Fedora 的仓库里，这就是为什么我们还需要编译安装 libQtShadowsocks 的原因。 libQtShadowsocks 依赖 qt5-devel botan2-devel cmake gcc-c++ 安装 libQtShadowsocks 所需要的依赖1sudo dnf -y install qt5-devel botan2-devel cmake gcc-c++ 编译安装 libQtShadowsocks123456git clone https://github.com/ericclose/libQtShadowsocks.gitcd libQtShadowsocksmkdir build &amp;&amp; cd buildcmake .. -DCMAKE_INSTALL_PREFIX=/usrmake -j4sudo make install 此处为什么不下载官方归档好的源码呢，详情点此issue，本文为了方便自己编译，故根据这个issuse作出了仅有的少数改动，即可成功编译。 shadowsocks-qt5 依赖 cmake qt5-qtbase-gui qrencode-devel libQtShadowsocks （正是我们前面所编译安装的） zbar-devel libappindicator-devel 安装 shadowsocks-qt5 所需要的依赖1sudo dnf -y install cmake qt5-qtbase-gui qrencode-devel zbar-devel libappindicator-devel 编译安装 shadowsocks-qt51234567curl -L https://github.com/shadowsocks/shadowsocks-qt5/archive/v3.0.1.tar.gz &gt; shadowsocks-qt5-3.0.1.tar.gztar -xzvf shadowsocks-qt5-3.0.1.tar.gzcd shadowsocks-qt5-3.0.1mkdir build &amp;&amp; cd buildcmake .. -DCMAKE_INSTALL_PREFIX=/usrmake -j4sudo make install 到这里我们就完成了所有工作，你可以在应用列表里看到了，但是如果这时发现图标没有正常的显示，可以这么做。 1sudo vim /usr/share/applications/shadowsocks-qt5.desktop 在 Icon=xxxx 这个添加上你下载好的图标的路径，如 Icon=/home/innovation/Pictures/icons/shadowsocks-qt5.svg点此下载svg图标。","categories":[{"name":"Proxy","slug":"Proxy","permalink":"https://ericclose.github.io/categories/Proxy/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://ericclose.github.io/tags/shadowsocks/"},{"name":"代理","slug":"代理","permalink":"https://ericclose.github.io/tags/%E4%BB%A3%E7%90%86/"},{"name":"Fedora","slug":"Fedora","permalink":"https://ericclose.github.io/tags/Fedora/"},{"name":"客户端","slug":"客户端","permalink":"https://ericclose.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"name":"翻墙","slug":"翻墙","permalink":"https://ericclose.github.io/tags/%E7%BF%BB%E5%A2%99/"},{"name":"科学上网","slug":"科学上网","permalink":"https://ericclose.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"编译","slug":"编译","permalink":"https://ericclose.github.io/tags/%E7%BC%96%E8%AF%91/"}]},{"title":"VMware Workstation 安装 macOS 10.13（多图预警）","slug":"install-macOS-10-13-on-VMware-workstation","date":"2019-04-21T16:00:00.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"install-macOS-10-13-on-VMware-workstation.html","link":"","permalink":"https://ericclose.github.io/install-macOS-10-13-on-VMware-workstation.html","excerpt":"由于安装黑苹果需要配备兼容的硬件且难度较大，如果想要更轻松的在Windows和Linux的机子上体验macOS的一种方法就是把它装在 VMware Workstation上。这样做的好处是方便安装，通过使用虚拟机，您可以同时使用macOS和Windows或Linux；但是缺点也很明显，无法充分调动硬件性能。本文将指导您如何在VMware Workstation上安装macOS：","text":"由于安装黑苹果需要配备兼容的硬件且难度较大，如果想要更轻松的在Windows和Linux的机子上体验macOS的一种方法就是把它装在 VMware Workstation上。这样做的好处是方便安装，通过使用虚拟机，您可以同时使用macOS和Windows或Linux；但是缺点也很明显，无法充分调动硬件性能。本文将指导您如何在VMware Workstation上安装macOS： 准备工作下载好以下文件： VMware Workstation VMware Workstation是VMware公司推出的一款桌面虚拟计算软件，至于下载和安装，填写license这里不赘述，请自行使用搜索引擎查询。 unlocker (项目发行地址点此，此处下载最新版本的zip) 在用VMware安装macOS前需要对VMware打补丁，unlocker就起到这个作用。 macOS High Sierra 10.13.iso 链接：https://pan.baidu.com/s/1eSGmiwq 密码：2zk6 MD5 ：3E3048A0BD26A03D54DBED7706548726 SHA-1 ：31094D7B58D67002B9824E428675E895F81F4B47 macOS High Sierra 10.13.iso 是macOS的镜像文件。MD5 和 SHA-1 用于校验文件是否完整无损坏。如果不知道如何校验，请自行使用搜索引擎查询。 应用 unlocker 补丁把下载好的unlocker解压，此处我以解压到 G:\\unlocker 为例。使用 管理员模式 打开cmd，执行以下命令： 12cd /d H:\\unlockerwin-install 执行命令后期间会下载 VMware Tools ，所以过程需要稍微比较久的时间，当显示Finished后即表明已完成打补丁的操作，截图如下： 打开 VMware 新建虚拟机 打开VMware，选择 新建虚拟机 选择 典型安装 ，下一步 点击 浏览 ，找到下载好的iso文件，然后下一步 选择安装 Apple Mac OS X由于我们之前打过了补丁,所以这时我们能看到有Apple Mac OS X这个选项，选择，然后选中macOS 10.13，下一步 选择虚拟机存放的路径，自行选择合适的路径下一步 选择存储为单个文件（因为存储为多个文件会影响性能） 自定义硬件 建议把内存调大点，我这里设置成4GB，视实际内存大小而定。其他选项无需调整，点击关闭，完成即可。 开启虚拟机 等待载入安装界面 选择 简体中文 ，下一步 点击继续 继续，同意许可条款 在左上角的菜单栏，点击【实用工具】-&gt;【磁盘工具】 选中分配给虚拟机的磁盘，点击 抹掉 名称随意，格式，方案默认即可。点击 抹掉 点击完成，关闭磁盘工具的窗口。 选中刚刚的磁盘，点击 继续 安装开始，此处大概需要10~20分钟，泡杯咖啡静待吧。 等待重启 鼠标滚轮滚动到最下面，选择 中国 ，继续 简体拼音，继续 现在不传输任何信息，继续 此处我选择 不登陆 ，跳过这一步 同意软件许可协议 创建电脑账户（即本地账户），输入全名，密码。提示部分可不填写，填写完成后，点击继续即可。 快捷设置，点击继续。 正在设置您的 Mac… 进入桌面发现显示区域不能适配屏幕大小，这是因为我们还没有安装 VMware Tools 。这里我们先点击左上角菜单，选择关机 点击 CD/DVD (SATA) 使用 物理驱动 ，自动检测 ，OK 开启 macOS 在VMware的菜单栏里，选择【虚拟机】-&gt;【安装 VMware Tools】 这时在桌面的右上角会出现 VMware Tools 的图标，双击图标，然后点击 安装 VMware Tools 安装过程中会请求输入密码，输入密码后点击 安装软件 即可 安装完成后需要重新启动 重启完后，弹窗提示 VMware Tools 已被阻止 ，我们打开 dock栏 上的 系统偏好设置 点击【安全性与隐私】 点击【允许】VMware Tools的载入，然后再点击左下角的【锁】按钮进行更改 最后，弄完上述所有操作后重启就OK了。此处附上成果图，如下：","categories":[{"name":"VM","slug":"VM","permalink":"https://ericclose.github.io/categories/VM/"}],"tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"https://ericclose.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"macOS","slug":"macOS","permalink":"https://ericclose.github.io/tags/macOS/"}]},{"title":"如何升级 CentOS 7 的内核","slug":"upgrade-kernel-version-on-CentOS-7","date":"2019-03-30T16:00:00.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"upgrade-kernel-version-on-CentOS-7.html","link":"","permalink":"https://ericclose.github.io/upgrade-kernel-version-on-CentOS-7.html","excerpt":"CentOS 7 官方的内核版本有点低，在 VMware 里内核版本至少要3.2才能使用USB 3.0，所以我在网上查了一下怎么升级内核，并记录了下来。","text":"CentOS 7 官方的内核版本有点低，在 VMware 里内核版本至少要3.2才能使用USB 3.0，所以我在网上查了一下怎么升级内核，并记录了下来。 登录 root 用户1su --login root 导入公钥1rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org 安装 ELRepo1yum install https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm 安装 kernel-ml1yum --enablerepo=elrepo-kernel install kernel-ml 重启重启时，通过方向键选择启动安装的新版本内核。 比如此处我安装的新的内核版本为 5.0.7 ，所以我应该按方向键 ↑ 选择新的版本，然后按 回车 启动。 替换 kernel-headers1yum --enablerepo=elrepo-kernel -y swap kernel-headers -- kernel-ml-headers 替换 kernel-tools-libs1yum --enablerepo=elrepo-kernel -y swap kernel-tools-libs -- kernel-ml-tools-libs 替换 kernel-tools注: 如果在这一步遇到说系统没有 kernel-tools 这个包不用管这个错误，继续下一步就行。 1yum --enablerepo=elrepo-kernel -y swap kernel-tools kernel-ml-tools 替换 kernel-devel1yum --enablerepo=elrepo-kernel -y swap kernel-devel -- kernel-ml-devel 移除 CentOS 7 的官方内核1yum remove kernel","categories":[{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/categories/Linux/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"https://ericclose.github.io/tags/CentOS/"},{"name":"内核","slug":"内核","permalink":"https://ericclose.github.io/tags/%E5%86%85%E6%A0%B8/"}]},{"title":"CentOS 7 使用 Tor 代理访问 Tor 暗网（.onion 域名的网站）","slug":"access-onionland-with-Tor-on-CentOS-7","date":"2019-03-25T16:00:00.000Z","updated":"2020-10-02T07:15:30.475Z","comments":true,"path":"access-onionland-with-Tor-on-CentOS-7.html","link":"","permalink":"https://ericclose.github.io/access-onionland-with-Tor-on-CentOS-7.html","excerpt":"说到使用 Tor，人们通常只会想到使用 Tor 浏览器（Tor Browser）。但是 Tor 只能用于 Tor 浏览器代理使用吗？答案是否定的。你可以借助 Tor 给你的系统进行代理，其默认监听端口为 9050，下面将简单的介绍下具体流程。 注意：Tor 代理不仅仅只能用于浏览器，其他非浏览器应用也可使用其代理。当然我还是要强调一下，本文的主题是使用 Tor 代理访问暗网，本文以使用 Chrome 访问 .onion 站点为例，不考虑到匿名和安全的防护。","text":"说到使用 Tor，人们通常只会想到使用 Tor 浏览器（Tor Browser）。但是 Tor 只能用于 Tor 浏览器代理使用吗？答案是否定的。你可以借助 Tor 给你的系统进行代理，其默认监听端口为 9050，下面将简单的介绍下具体流程。 注意：Tor 代理不仅仅只能用于浏览器，其他非浏览器应用也可使用其代理。当然我还是要强调一下，本文的主题是使用 Tor 代理访问暗网，本文以使用 Chrome 访问 .onion 站点为例，不考虑到匿名和安全的防护。 顺便澄清一下暗网并没有那些人为吸引眼球的媒体或个人所说的全都那般的阴暗危险，这里引用下一则我认为比较中肯的评说。（江来如果报道上出了偏差，你们是要负泽任的，你識得唔識得噶。） 暗网技术是很厉害的技术，有人说是平民的武器。因此，可以说和任何技术一样，暗网技术有两面性。暗网上的服务器到现在有多少，由于暗网的特性，恐怕很难说得清楚。 在此之中，又有多少服务器是非法的，也很难说清楚。即使能举出一个数字来，因为总数不知道，我们甚至不知道比例。 但是，我想不管是普通的互联网还是暗网，想通过互联网犯罪的人总是有的，想正常使用互联网的人也是有的。此外值得指出，虽然暗网上有一定比例的节点在提供违法犯罪的服务，但是这不代表暗网本身是违法的技术。 我们可以说，暗网是一种构建在互联网上的“虚拟互联网”， 它继承了互联网的思想，但因为互联网的物理结构和底层协议都已经形成， 不可能另起炉灶，所以建设在互联网的应用层次，作为一种“虚拟”的完善。 所以，就如同我们不能因为互联网上有网站是违法就否定互联网的价值一样，我们也不能否定暗网的价值。笔者在此希望本文的读者，能首先，实事求是地从纯技术的角度来深入认识暗网， 知道它确实是可以被滥用的媒介，但也可以是有利于构建更加安全的网络结构的工具。 这种认识不仅在道德上有助于正确评价暗网的功过是非， 也有助于在运用暗网时了解它可能的危险，例如运行一个暗网出口代理的危险，并进而安全使用; 更重要的是，能了解暗网技术的巨大优势，发掘出它的潜力，这将有助于开发更好的基于网络的计算机程序。——引用自 NeoAtlantis应用科学和神秘学实验室 安装 Tor12sudo yum install epel-releasesudo yum install tor 编辑配置文件1sudo vim /etc/tor/torrc 添加下列 3 行内容即可 /etc/tor/torrc123Socks5Proxy 127.0.0.1:1080 # 将 shadowsocks 作为 Tor 的前置代理ExcludeNodes &#123;cn&#125;,&#123;hk&#125;,&#123;mo&#125;,&#123;kp&#125;,&#123;ir&#125;,&#123;sy&#125;,&#123;pk&#125;,&#123;cu&#125;,&#123;vn&#125; # 表示排除这些国家／地区的节点StrictNodes 1 # 表示强制执行 如图所示： 启动 shadowsocks 代理如果你之前还没有安装 shadowsocks 的，请 【点此】 移步到相关页面 1ss-local -c ~/shadowsocks.json 启动 Tor 代理1systemctl start tor 启动系统代理「设置」-&gt;「网络」-&gt;「网络代理」-&gt;「手动」，如图所示。 Socks Host 这一项填写的内容为 127.0.0.1 和 9050 注意：9050 是 Tor 代理的默认端口号 成功截图浏览器访问 .onion 域名截图： 截图里的测试地址为：msydqstlz2kzerdg.onion 停用 Tor 代理当你不需要使用 Tor 代理的时候在终端输入这个命令： 1systemctl stop tor 关闭系统代理「设置」-&gt;「网络」-&gt;「网络代理」-&gt;「禁用」即可","categories":[{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/categories/Linux/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://ericclose.github.io/tags/shadowsocks/"},{"name":"Tor","slug":"Tor","permalink":"https://ericclose.github.io/tags/Tor/"},{"name":"代理","slug":"代理","permalink":"https://ericclose.github.io/tags/%E4%BB%A3%E7%90%86/"}]},{"title":"CentOS 7 使用 shadowsocks 客户端科学上网","slug":"shadowsocks-client-on-CentOS-7","date":"2019-03-24T16:00:00.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"shadowsocks-client-on-CentOS-7.html","link":"","permalink":"https://ericclose.github.io/shadowsocks-client-on-CentOS-7.html","excerpt":"编译安装 shadowsocks-libev获取最新的源代码123git clone https://github.com/shadowsocks/shadowsocks-libev.gitcd shadowsocks-libevgit submodule update --init --recursive","text":"编译安装 shadowsocks-libev获取最新的源代码123git clone https://github.com/shadowsocks/shadowsocks-libev.gitcd shadowsocks-libevgit submodule update --init --recursive 从源代码编译必备条件123suyum install epel-release -yyum install gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel -y 开始进行编译安装12./autogen.sh &amp;&amp; ./configure --prefix=/usr &amp;&amp; makemake install 编辑配置文件1vi ~/shadowsocks.json json配置信息此处以我常用的机场为例，直接复制节点列表任一可用的节点的json，如图 写进shadowsocks.json的配置信息大致如下 1234567891011&#123; &quot;server&quot;: &quot;xxx.xxx.xxx.xxx&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;timeout&quot;: 300, &quot;workers&quot;: 1, &quot;server_port&quot;: 24653, &quot;password&quot;: &quot;xxxxxx&quot;, &quot;method&quot;: &quot;chacha20-ietf&quot;, &quot;plugin&quot;: &quot;&quot;&#125; 启动shadowsocks客户端（即ss-local）1ss-local -c ~/shadowsocks.json 如图所示 注意：请不要关闭终端 启用系统代理「设置」-&gt;「网络」-&gt;「网络代理」-&gt;「手动」，如图所示： 在socks主机里填写你 shadowsocks.json 里的 local_address 和 local_port ，如我这里的 127.0.0.1 和 1080 。弄完关闭设置窗口就可以科学上网了。 关闭代理当你不想科学上网的时候先关闭系统代理（「设置」-&gt;「网络」-&gt;「网络代理」-&gt;「禁用」即可），然后在ss-local的那个终端按Ctrl+C即可。","categories":[{"name":"Proxy","slug":"Proxy","permalink":"https://ericclose.github.io/categories/Proxy/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://ericclose.github.io/tags/shadowsocks/"},{"name":"代理","slug":"代理","permalink":"https://ericclose.github.io/tags/%E4%BB%A3%E7%90%86/"},{"name":"客户端","slug":"客户端","permalink":"https://ericclose.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"name":"翻墙","slug":"翻墙","permalink":"https://ericclose.github.io/tags/%E7%BF%BB%E5%A2%99/"},{"name":"科学上网","slug":"科学上网","permalink":"https://ericclose.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]},{"title":"斐讯 K2P 刷 BREED 和 Padavan","slug":"phicomm-k2p-Padavan","date":"2019-02-16T16:00:00.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"phicomm-k2p-Padavan.html","link":"","permalink":"https://ericclose.github.io/phicomm-k2p-Padavan.html","excerpt":"本文介绍了 斐讯 K2P 刷 BREED 和 Padavan 的全过程 这里简要讲一下 斐讯 K2P 有如下版本 K2P (A1) K2P (A2) K2P (B1) K2P (B2)","text":"本文介绍了 斐讯 K2P 刷 BREED 和 Padavan 的全过程 这里简要讲一下 斐讯 K2P 有如下版本 K2P (A1) K2P (A2) K2P (B1) K2P (B2) A1和A2采用的处理器是联发科 MT7621A，二者的区别在于A2少了屏蔽罩和电源缩水，A1和A2的固件可以通刷。B1和B2采用的处理器是博通BCM47189，其他的不清楚了。 本教程针对以我的机子为例（建议先参考下K2P刷机指南说明食用） 斐讯 K2P A2版 官方系统 软件版本 为 22.7.8.5 启用 TelnetWindows 启用 Telnet 客户端「控制面板」–&gt;「程序」–&gt;「程序和功能」–&gt;「启用或关闭 Windows 功能」，找到「Telnet 客户端」启用即可，如图。 启用路由器的 Telnet 准备1：电脑、网线2根、全新 / 已恢复出厂 的K2P。 准备2：下载K2P的telnet开启工具。【点击下载】 步骤1请先给K2P上电后用网线将电脑连接路由器的LAN口 步骤2全新K2P默认IP是 192.168.2.1 ，请使用浏览器登录K2P的WEB管理页面完成配置引导，具体操作如下：1). 在浏览器输入 192.168.2.1 ，访问全新K2P的WEB管理页面会进入配置引导，请根据提示完成上网配置。 请在这个时候再确认一下K2P的版本号，如果版本号与刷机方式不匹配，容易出现刷机设备等问题。 步骤3开始使用“开启telnet”，请打开【telnet开启工具】为K2P开启telnet服务，操作如下。 注意：请确保PC的telnet客户端已经开启。 刷入BREED首先下载好BREED，【点击下载】按 快捷键Win+R 输入 telnet 192.168.2.1 登录到路由器，进去后如下： 登陆后，照如下输入命令 12root@K2P:/#cd /tmproot@K2P:/tmp#opkg install http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7621/packages/packages/wget_1.16.3-1_ramips_1004kc.ipk 安装成功应该可以看到有wget-ssl文件了 12root@K2P:/tmp# ls /overlay/usr/bin/dbclient dropbearkey scp ssh wget-ssl 然后下载breed: 1wget-ssl --no-check-certificate https://breed.hackpascal.net/breed-mt7621-phicomm-k2p.bin 下载完成后校对一下md5是不是与官方公布的一致即可 ,如果OK,继续下一步操作. 12root@K2P:/tmp# md5sum breed-mt7621-phicomm-k2p.bin4b757898df85bff44668a0987768180f breed-mt7621-phicomm-k2p.bin 写入breed: 1234567891011root@K2P:/tmp# cat /proc/mtddev: size erasesize namemtd0: 01000000 00010000 &quot;ALL&quot;mtd1: 00030000 00010000 &quot;Bootloader&quot;mtd2: 00010000 00010000 &quot;Config&quot;mtd3: 00010000 00010000 &quot;Factory&quot;mtd4: 00050000 00010000 &quot;permanent_config&quot;mtd5: 00f60000 00010000 &quot;firmware&quot;mtd6: 00c48b96 00010000 &quot;rootfs&quot;mtd7: 00200000 00010000 &quot;rootfs_data&quot;root@K2P:/tmp# mtd -r write /tmp/breed-mt7621-phicomm-k2p.bin Bootloader 写入成功的情况下会自动重启的. 重启后路由断电，按住reset键，接通电源继续长按10秒左右即可进入BREED。进入BREED后即可刷机了。 固件备份浏览器输入 192.168.1.1 进入BREED切记：一定要做好备份工作「备份」-&gt; 分别选择EEPROM，固件，编程器固件，如图： 开始刷机开刷前，请必须记得先「恢复出厂设置」-&gt;「Config 区 (公版)」，然后点「执行」Padavan 下载地址：https://opt.cn2qq.com/padavan/找到 K2P_DRV_3.4.3.9-099.trx 下载恢复出厂设置以后，选择「固件升级」-&gt;勾选固件-&gt;浏览，选中你下载好的 K2P 的Padavan固件，比如我这次是「K2P_DRV_3.4.3.9-099.trx」，点击「上传」即可，如图： 等待路由器刷机成功并重启即可访问管理后台 不同固件的默认管理后台地址不一样，我这里 Padavan 的例子是 192.168.123.1，而用户名密码则均是 admin 。补充一句：WiFi的默认密码为：1234567890 ，大家要记得这个，因为以后如果将Padavan重置的时候，很多人都不知道WiFi密码是多少，以为还是原来你设置的密码，其实不是的，已经变成了默认密码了。","categories":[{"name":"Router","slug":"Router","permalink":"https://ericclose.github.io/categories/Router/"}],"tags":[{"name":"斐讯","slug":"斐讯","permalink":"https://ericclose.github.io/tags/%E6%96%90%E8%AE%AF/"},{"name":"Phicomm","slug":"Phicomm","permalink":"https://ericclose.github.io/tags/Phicomm/"},{"name":"Padavan","slug":"Padavan","permalink":"https://ericclose.github.io/tags/Padavan/"},{"name":"BREED","slug":"BREED","permalink":"https://ericclose.github.io/tags/BREED/"},{"name":"刷机","slug":"刷机","permalink":"https://ericclose.github.io/tags/%E5%88%B7%E6%9C%BA/"},{"name":"固件","slug":"固件","permalink":"https://ericclose.github.io/tags/%E5%9B%BA%E4%BB%B6/"}]},{"title":"（类）原生 Android 网络去叉／叹号 Android 5.0 - 10.0","slug":"Captive-Portal-Android","date":"2019-01-17T16:00:00.000Z","updated":"2020-09-29T09:54:29.487Z","comments":true,"path":"Captive-Portal-Android.html","link":"","permalink":"https://ericclose.github.io/Captive-Portal-Android.html","excerpt":"使用（类）原生 Android 的用户在中国大陆会发现状态栏的网络信号有个叉或者是感叹号，这是为什么呢？又该如何去除？","text":"使用（类）原生 Android 的用户在中国大陆会发现状态栏的网络信号有个叉或者是感叹号，这是为什么呢？又该如何去除？ 说明CaptivePortal 是 Android 5.0 引入的一种检测网络是否正常连接的机制，通过 HTTP 返回的状态码是否是 204 来判断是否成功，如果访问得到了 200，那你就可能处在一个需要登录验证才能上网的环境里，比如说校园网，再比如说一些酒店提供的客户才能免费使用的 Wi-Fi（其实是通过 DNS 劫持实现的），如果连接超时（根本就连接不上）就在 Wi-Fi 图标和信号图标上加一个标志，Android 5 和 Android 6 是叹号，Android 7 改成一个叉了。只不过默认访问的是谷歌自家的验证服务器，然而 Google 是被墙掉了，导致 Android 没有办法正确评估网络。所以，系统每隔一定时间都会重新尝试连接，就在不知不觉中消耗了数据流量。更恐怖的就是 Android 认为在 Wi-Fi 下无法连接互联网，就让联网的程序通通走流量… ADB 工具要想去除，需要用到一个工具，那就是 ADB，点此 下载（需要科学上网）。然后请自行搞定 ADB 的环境变量配置，如果不会请 点此。配置好后，请在手机设置里开启开发者选项，然后再打开USB 调试。最后通过数据线连接电脑，就可以开搞了。 解决方法Android 5.0 - 6.0123456# 删除地址就可以恢复默认的谷歌服务器adb shell settings delete global captive_portal_server# 设置一个可用地址adb shell settings put global captive_portal_server http://developers.google.cn/generate_204# 查询当前地址adb shell settings get global captive_portal_server 注意：执行完后请打开飞行模式后再关闭 Android 7.0 - Android 10.0123456# 删除（删除默认用HTTPS）adb shell settings delete global captive_portal_https_urladb shell settings delete global captive_portal_http_url# 设置一个可用地址adb shell settings put global captive_portal_http_url http://developers.google.cn/generate_204adb shell settings put global captive_portal_https_url https://developers.google.cn/generate_204 注意：执行完后请打开飞行模式后再关闭","categories":[{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/categories/Android/"}],"tags":[{"name":"类原生","slug":"类原生","permalink":"https://ericclose.github.io/tags/%E7%B1%BB%E5%8E%9F%E7%94%9F/"},{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/tags/Android/"}]},{"title":"使用 you-get 下载视频","slug":"you-get-tutorial","date":"2018-10-27T16:00:00.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"you-get-tutorial.html","link":"","permalink":"https://ericclose.github.io/you-get-tutorial.html","excerpt":"You-get 是一个小巧的能够用于下载网络媒体内容（视频，音频，图片）的命令行程序。开发者是soimort，仓库点击这里访问","text":"You-get 是一个小巧的能够用于下载网络媒体内容（视频，音频，图片）的命令行程序。开发者是soimort，仓库点击这里访问 准备工作以下乃必要依赖，需要单独安装： Python 3 此处提供 Python 3.7.4 的离线安装包下载链接: https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe FFmpeg 此处提供 ffmpeg-4.2-win64-static.zip 的下载链接: https://ffmpeg.zeranoe.com/builds/win64/static/ffmpeg-4.2-win64-static.zip ，下载完后解压。 必备配置：自行解决 Python 和 FFmpeg 环境变量 的配置，此处不赘述，不懂怎么配置就用用万能的搜索引擎。 安装 you-get 和 PySocks 经过前面的准备工作后，就可以开始安装 you-get 了 打开 cmd ，通过 pip 安装 you-get ，即输入如下命令： 1pip3 install you-get 如果需要 you-get 通过 SOCKS5 代理（如 Shadowsocks / ShadwoskcsR）下载 YouTube 的视频，还得安装 PySocks 1pip3 install PySocks 使用说明 当观赏感兴趣的视频之前，您可以使用 –info/-i 以查看所有可用画质与格式。如：在 cmd 上输入 you-get -i https://www.bilibili.com/video/av33503264 ，输出如下： 123456789101112131415161718site: Bilibilititle: 【官方双语】游戏本？轻薄本？谁才是便携游戏之本？#linus谈科技streams: # Available quality and codecs [ DEFAULT ] _________________________________ - format: hdflv container: flv size: 192.0 MiB (201363047 bytes) # download-with: you-get --format&#x3D;hdflv [URL] - format: flv720 container: flv size: 150.1 MiB (157350612 bytes) # download-with: you-get --format&#x3D;flv720 [URL] - format: flv container: flv size: 82.2 MiB (86192476 bytes) # download-with: you-get --format&#x3D;flv [URL] 使用以下命令即可下载默认画质: 1you-get -o &quot;F:\\Downloads&quot; -O &quot;谁才是便携游戏之本？&quot; https://www.bilibili.com/video/av33503264 这里值得说明的是： -o后面的是视频需要下载至的路径，如果你输入的时候没有这个选项的话就默认下载到cmd的工作目录下，如下图的工作目录就是 C:\\Users\\Innovation -O后面则是保存的名字，你输入的时候 没有 这个选项的的话，文件名字就是默认为前面的Title，即 【官方双语】游戏本？轻薄本？谁才是便携游戏之本？#linus谈科技那么如果你想要下载其他画质或格式的视频你又该怎样呢？比如说我们选择上面示例中的 82.2 MiB 大小的那个画质，只需要在url（即 https://www.bilibili.com/video/av33503264 ）之前添加 --format=flv （根据前面的 # download-with: you-get --format=flv [URL] 得知）即可 如果中途想暂停了，怎么办？ 暂停与恢复下载 可以使用Ctrl+C 暂停下载. 临时的 *.download 文件将保存于输出目录。下次使用you-get传入相同参数时，下载将从上次继续开始。 代理问题当需要使用SOCKS5代理(Shdowsocks / ShadowsocksR)时，您可以使用 -s 选项设置socks代理。如： 1you-get -s 127.0.0.1:1080 https://www.youtube.com/watch?v=jNQXAC9IVRw 注意：上面的 1080 是我Shadowsocks/ShadowsocksR的端口号，如果你的不是这个端口号，请自行更改。","categories":[{"name":"Tools","slug":"Tools","permalink":"https://ericclose.github.io/categories/Tools/"}],"tags":[{"name":"you-get","slug":"you-get","permalink":"https://ericclose.github.io/tags/you-get/"},{"name":"下载","slug":"下载","permalink":"https://ericclose.github.io/tags/%E4%B8%8B%E8%BD%BD/"},{"name":"工具","slug":"工具","permalink":"https://ericclose.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Navicat 软件官网及其 Crack","slug":"Navicat","date":"2018-10-26T16:00:00.000Z","updated":"2020-09-29T09:54:29.487Z","comments":true,"path":"Navicat.html","link":"","permalink":"https://ericclose.github.io/Navicat.html","excerpt":"本文提供 Navicat 的官网，如果条件允许请支持正版。当然本文依然会提供 crack 过程","text":"本文提供 Navicat 的官网，如果条件允许请支持正版。当然本文依然会提供 crack 过程 Navicat 官网 中文官网产品页面：https://www.navicat.com.cn/ 英文官网产品页面：https://www.navicat.com/en/ Crack 激活 准备：进入官方产品页面，选中 Free Trail(免费试用)，然后下载相应的安装包，下载完后安装后即可。经测试该工具已支持 Navicat 软件的 12.1.22 版本。 工具由DoubleLabyrinth开发，如果感兴趣点此跳转到仓库，使用方法如下： 下载 navicat-keygen-for-x64.zip ，点此下载 解压 navicat-keygen-for-x64.zip 至合适目录，如 D:\\Program Files\\navicat-keygen\\ 目录下 以 管理员身份运行 cmd，执行下列两行命令（命令的解释在命令后面一行提供）。如： 1cd /d &quot;D:\\Program Files\\navicat-keygen&quot; 此处我解压的具体路径为 D:\\Program Files\\navicat-keygen ，所以 cd /d 后面就接着这个路径。 在cmd上使用 navicat-patcher.exe 替换掉 navicat.exe 和 libcc.dll 里的Navicat激活公钥。即执行如下命令： 1navicat-patcher.exe &quot;D:\\Program Files\\PremiumSoft\\Navicat 12 for MySQL&quot; D:\\Program Files\\PremiumSoft\\Navicat 12 for MySQL 是我以Navicat 12 for MySQL的安装路径为例，请根据你需要 Crack 的 Navicat 任一软件 的安装路径进行修改执行完这条命令后的一份样例输出： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111**************************************************** Navicat Patcher by @DoubleLabyrinth ** Version: 4.0 ****************************************************Press Enter to continue or Ctrl + C to abort.[+] Try to open Navicat.exe ... Ok![+] Try to open libcc.dll ... Ok![+] PatchSolution0 ...... Ready to apply [*] Patch offset &#x3D; +0x029bccd8[+] PatchSolution1 ...... Ready to apply [*] [0] Patch offset &#x3D; +0x02206c00 [*] [1] Patch offset &#x3D; +0x0074c489 [*] [2] Patch offset &#x3D; +0x02206910 [*] [3] Patch offset &#x3D; +0x0074c46f [*] [4] Patch offset &#x3D; +0x02206904[-] PatchSolution2 ...... Omitted[+] PatchSolution3 ...... Ready to apply [*] [ 0] Instruction RVA &#x3D; 0x016539c8, Patch Offset &#x3D; +0x023e64d4 [*] [ 1] Instruction RVA &#x3D; 0x01653a1f, Patch Offset &#x3D; +0x01652e23 [*] [ 2] Instruction RVA &#x3D; 0x01653a25, Patch Offset &#x3D; +0x01652e28 [*] [ 3] Instruction RVA &#x3D; 0x01653a8c, Patch Offset &#x3D; +0x01652e8e ... ... ... [*] [108] Instruction RVA &#x3D; 0x016604e1, Patch Offset &#x3D; +0x023e66d8 [*] [109] Instruction RVA &#x3D; 0x01660518, Patch Offset &#x3D; +0x0165f91c [*] [110] Instruction RVA &#x3D; 0x0166051e, Patch Offset &#x3D; +0x0165f921[*] PatchSolution0 is suppressed in order to keep digital signature valid.[*] Generating new RSA private key, it may take a long time...[*] Your RSA public key:-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1hV66HgU4LrKXWW6O7bKAN6ZTr5W+Mq8ClTQ+Pc+BdhLu6rww55kVq7OXKGpvx0G4eTafYMGrrBETgDSTaMqBx+8bZbGBWh2LtNfqU+xUrpHHBSz0ByBc3iTEzzthJl+Fzf8suDX2lWYIc&#x2F;Ym&#x2F;eWYtxdJ7xOzLb68z4N0zVmA0jFX2FOm75DRYgKqy4SGixapfucL9dVaWVLTUdbrVdj4LX78t4t5ykbYoThrat4yuLvj&#x2F;BxLaQ6ivKD+ScfHdtCoY+NA5jmBoUfBq3Q1SXBiNaoXctbi0&#x2F;H3MiPu0cRojryAocooF89yFm5&#x2F;mNnzWGAYPr6DvBI8CDTZmjaQ4oCaQIDAQAB-----END PUBLIC KEY-----******************************************************** PatchSolution1 ********************************************************[*] Previous:+0x0000000002206c00 44 37 35 31 32 35 42 37 30 37 36 37 42 39 34 31 D75125B70767B941+0x0000000002206c10 34 35 42 34 37 43 31 43 42 33 43 30 37 35 35 45 45B47C1CB3C0755E+0x0000000002206c20 37 43 43 42 38 38 32 35 43 35 44 43 45 30 43 35 7CCB8825C5DCE0C5......[*] After:+0x0000000002206c00 33 43 32 39 30 39 35 38 33 34 38 41 42 43 35 39 3C290958348ABC59+0x0000000002206c10 36 44 39 30 43 45 45 38 31 36 42 36 39 38 34 44 6D90CEE816B6984D+0x0000000002206c20 35 32 35 34 37 45 30 32 34 31 42 36 42 43 31 41 52547E0241B6BC1A......[*] Previous:+0x000000000074c480 fe ea bc 01 ....[*] After:+0x000000000074c480 08 00 00 00 ....[*] Previous:+0x0000000002206910 45 31 43 45 44 30 39 42 39 43 32 31 38 36 42 46 E1CED09B9C2186BF+0x0000000002206920 37 31 41 37 30 43 30 46 45 32 46 31 45 30 41 45 71A70C0FE2F1E0AE+0x0000000002206930 46 33 42 44 36 42 37 35 32 37 37 41 41 42 32 30 F3BD6B75277AAB20......[*] After:+0x0000000002206910 41 33 39 42 41 36 43 34 31 36 33 32 35 30 46 45 A39BA6C4163250FE+0x0000000002206920 42 32 41 39 31 41 34 32 46 44 42 46 30 41 32 31 B2A91A42FDBF0A21+0x0000000002206930 33 34 46 34 36 44 43 45 34 30 42 46 41 42 33 35 34F46DCE40BFAB35......[*] Previous:+0x000000000074c460 59 Y+0x000000000074c470 08 01 00 ...[*] After:+0x000000000074c460 06 .+0x000000000074c470 00 00 00 ...[*] Previous:+0x0000000002206900 39 32 39 33 33 92933[*] After:+0x0000000002206900 42 34 34 33 38 B4438******************************************************** PatchSolution3 ********************************************************[*] +023e64d4: 4d 49 49 ---&gt; 4d 49 49[*] +01652e23: 42 49 ---&gt; 42 49[*] +01652e28: 6a ---&gt; 6a.........[*] +023e66d8: 77 49 44 41 ---&gt; 51 49 44 41[*] +0165f91c: 51 41 ---&gt; 51 41[*] +0165f921: 42 ---&gt; 42[*] New RSA-2048 private key has been saved toD:\\Program Files\\navicat-keygen\\RegPrivateKey.pem******************************************************** PATCH HAS BEEN DONE SUCCESSFULLY! ** HAVE FUN AND ENJOY~ ******************************************************** 接下来 cmd 上使用 navicat-keygen.exe 来生成序列号和激活码，即执行如下命令： 1navicat-keygen.exe -text .\\RegPrivateKey.pem 执行步骤5后，你会被要求选择Navicat产品类别、语言以及输入主版本号。之后会随机生成一个序列号。输出如下： 1234567891011121314151617181920212223242526272829303132333435Select Navicat product:0. DataModeler1. Premium2. MySQL3. PostgreSQL4. Oracle5. SQLServer6. SQLite7. MariaDB8. MongoDB9. ReportViewer(Input index)&gt; 2Select product language:0. English1. Simplified Chinese2. Traditional Chinese3. Japanese4. Polish5. Spanish6. French7. German8. Korean9. Russian10. Portuguese(Input index)&gt; 0(Input major version number, range: 0 ~ 15, default: 12)&gt; 12Serial number:NAVO-2ORP-IN5A-GQEEYour name: 由于我以 Navicat 12 for MySQL 英文版为例，所以我第一个输入（产品类别） 是 2 ，第二个输入 （语言） 是 0 ，第三个输入（主版本号）是 12 ，最后生成了序列号 NAVO-2ORP-IN5A-GQEE （留着等下用）。 接下来你会被要求输入 用户名 和 组织名 ；请随便填写，但不要太长。 123Your name: usernameYour organization: OrganizationInput request code (in Base64), input empty line to end: 如上我将用户名设为 username ，组织名设为 Organization 。 之后你会被要求填入请求码。注意：不要关闭cmd. 断开网络 并打开 Navicat 软件。找到注册窗口，并填入刚才程序生成的序列号。然后点击 激活 按钮。 然后 Navicat 软件会说激活失败，并询问你是否 手动激活 ，直接选择 手动激活 即可 在 手动激活窗口 你会得到一个请求码，复制它并把它粘贴到 cmd 里。最后别忘了连按至少两下回车结束输入。 1234567891011121314151617[*] Your name: username[*] Your organization: Organization[*] Input request code in Base64: (Input empty line to end)Gz7OvJvHLKAxokLXKwhDjhvj0LsRL5C019OMDMJBRwapfMUbyXTYFzgvOF1VJw0hH5BWUvm5vUWqpJzGFRdtOew8oc3gKEkJNWamoqZmJqXgEROXDGxm&#x2F;6WTjZDVeXUA1YZkHmzqN+MfC3gKwW&#x2F;OlBpbs3cdaQnqQqmVyb9Pa+G+&#x2F;x8RxsgxgBg0mhrtaWJj9QTlOtP1L7+OfTreSINTHF634iEtVlT5ppUb5oSWgyHlHHqDNP+bVKIaPStRLri3+7HSi2SVN+GAiXLWSf2oXemQmqWFcMckh187PBPvxvjAOSs7NJRMOeKC4s&#x2F;IDLlOCGsXfIbVEA2aUYPfbIeqrQ&#x3D;&#x3D;[*] Request Info:&#123;&quot;K&quot;:&quot;NAVP3B3ISW2WKNFP&quot;, &quot;DI&quot;:&quot;+ZnYuzjIyVrKpNGSWB4k&quot;, &quot;P&quot;:&quot;WIN 8&quot;&#125;[*] Response Info:&#123;&quot;K&quot;:&quot;NAVP3B3ISW2WKNFP&quot;,&quot;DI&quot;:&quot;+ZnYuzjIyVrKpNGSWB4k&quot;,&quot;N&quot;:&quot;User&quot;,&quot;O&quot;:&quot;Organization&quot;,&quot;T&quot;:1571627725&#125;[*] Activation Code:sdNrmWhr&#x2F;uPZI4lyIgtSyf+00CZwng5ItzIh59VDKjKGloKPW5DZoSa6bSKxRXaJhlL+NrKEZmfk4zZA4yG0sinEZML4xCeSy0Wf&#x2F;nlInZqzuvdgJD+cj4tb5HlpN3BGFAR3s3tfTd8WR9YoG&#x2F;lBXC6UG6J1BWDB1Se5yuKoD12puWMxt3hc2bodrQRUrPDle1vOTS16iMd2b2Ck1kSok1ef5nK48N28IN9iTiNhQ7xTae2u9&#x2F;1NCWS5VNDW9oZ4SnR99kmfZMxsK00STZntcboUGaYuW3TbJcs2UHrilESYE58XXhs1BFHSSy2Gu7HTOWrUBkRLZQB1oBNNLVS2Kw&#x3D;&#x3D; 如果不出意外，你会得到一个 Activation Code 。直接复制它，并把它粘贴到Navicat的 手动激活窗口 ，最后点激活按钮。如果没什么意外的话应该能成功激活。复制的 Activation Code 内容为： 1sdNrmWhr&#x2F;uPZI4lyIgtSyf+00CZwng5ItzIh59VDKjKGloKPW5DZoSa6bSKxRXaJhlL+NrKEZmfk4zZA4yG0sinEZML4xCeSy0Wf&#x2F;nlInZqzuvdgJD+cj4tb5HlpN3BGFAR3s3tfTd8WR9YoG&#x2F;lBXC6UG6J1BWDB1Se5yuKoD12puWMxt3hc2bodrQRUrPDle1vOTS16iMd2b2Ck1kSok1ef5nK48N28IN9iTiNhQ7xTae2u9&#x2F;1NCWS5VNDW9oZ4SnR99kmfZMxsK00STZntcboUGaYuW3TbJcs2UHrilESYE58XXhs1BFHSSy2Gu7HTOWrUBkRLZQB1oBNNLVS2Kw&#x3D;&#x3D; 大功告成，自行测试是否已激活。","categories":[{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/categories/Windows/"}],"tags":[{"name":"Navicat","slug":"Navicat","permalink":"https://ericclose.github.io/tags/Navicat/"},{"name":"破解","slug":"破解","permalink":"https://ericclose.github.io/tags/%E7%A0%B4%E8%A7%A3/"},{"name":"激活","slug":"激活","permalink":"https://ericclose.github.io/tags/%E6%BF%80%E6%B4%BB/"}]},{"title":"JetBrains 软件官网购买、学生授权或 Crack","slug":"JetBrains","date":"2018-10-25T16:00:00.000Z","updated":"2020-09-29T09:54:29.487Z","comments":true,"path":"JetBrains.html","link":"","permalink":"https://ericclose.github.io/JetBrains.html","excerpt":"本文提供 JetBrains 的官网，如果条件允许请支持正版。当然本文依然会提供 crack 过程","text":"本文提供 JetBrains 的官网，如果条件允许请支持正版。当然本文依然会提供 crack 过程 官网 JetBrains 官网 JetBrains 商店 JetBrains 学生授权申请方式，通过这种方式学生用户可以免费使用（学校不提供教育邮箱的除外） Crack 补丁激活 由于编写此文已过了很久，以下的方式已 不再适用 于最新的Jetbrains全家桶的crack，建议直接前往此处获取最新crack教程。 出于种种无奈，很多人会选择 crack 付费软件。IntelliJ IDEA 2018.2.4 下载链接: https://download.jetbrains.8686c.com/idea/ideaIU-2018.2.4.exePyCharm 2018.2.3 下载链接: https://download.jetbrains.8686c.com/python/pycharm-professional-2018.2.3.exe 准备：首先安装完软件，并 开启试用 后再食用下列教程，否则会出现打不开软件的情况 Crack 补丁为 Rover12421 开发，使用方法如下（文件路径根据实际情况做出变更）： 下载 JetbrainsCrack-3.1-release-enc.jar 点击下载，放置到D:\\Program Files\\JetbrainsCrack\\目录下 在 JetBrains 的任一软件，以 IntelliJ IDEA 为例，安装目录 D:\\Program Files\\JetBrains\\IntelliJ IDEA 2018.2.4\\bin 中找到 idea.exe.vmoptions 和 idea64.exe.vmoptions ，用编辑器打开并同时在两个文件最后追加一行 1-javaagent:D:&#x2F;Program Files&#x2F;JetbrainsCrack&#x2F;JetbrainsCrack-3.1-release-enc.jar 启动 IntelliJ IDEA , 输入如下激活码激活。 1234567891011121314151617181920212223242526ThisCrackLicenseId-&#123;&quot;licenseId&quot;:&quot;ThisCrackLicenseId&quot;,&quot;licenseeName&quot;:&quot;Rover12421&quot;,&quot;assigneeName&quot;:&quot;Rover12421&quot;,&quot;assigneeEmail&quot;:&quot;rover12421@163.com&quot;,&quot;licenseRestriction&quot;:&quot;By Rover12421 Crack, Only Test! Please support genuine!!!&quot;,&quot;checkConcurrentUse&quot;:false,&quot;products&quot;:[&#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;DB&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;GO&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&#123;&quot;code&quot;:&quot;RD&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;],&quot;hash&quot;:&quot;2911276/0&quot;,&quot;gracePeriodDays&quot;:7,&quot;autoProlongated&quot;:false&#125; 完成，自行查看是否成功","categories":[{"name":"Crack","slug":"Crack","permalink":"https://ericclose.github.io/categories/Crack/"}],"tags":[{"name":"破解","slug":"破解","permalink":"https://ericclose.github.io/tags/%E7%A0%B4%E8%A7%A3/"},{"name":"激活","slug":"激活","permalink":"https://ericclose.github.io/tags/%E6%BF%80%E6%B4%BB/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://ericclose.github.io/tags/JetBrains/"}]},{"title":"用 Windows 内置工具制作安装U盘","slug":"Windows-diskpart-tutorial","date":"2018-10-21T16:00:00.000Z","updated":"2020-09-29T09:54:29.502Z","comments":true,"path":"Windows-diskpart-tutorial.html","link":"","permalink":"https://ericclose.github.io/Windows-diskpart-tutorial.html","excerpt":"Diskpart 命令是 Windows 环境下的一个命令，利用 Diskpart 和解压缩软件即可制作好 Windows 安装U盘。","text":"Diskpart 命令是 Windows 环境下的一个命令，利用 Diskpart 和解压缩软件即可制作好 Windows 安装U盘。 过程准备工作 由于制作过程需要格式化U盘，在操作之前切记先备份好数据！ 从微软官方下载好 Windows 映像文件 （即 ISO 文件）， 点击此处 虽说利用微软的工具可以直接制作好Windows 10 的安装U盘，但是每次需要重装的时候就要再次联网下载映像文件就太麻烦了。所以此处骚操作（斜眼笑~ 点击进入前面提供的网站后，以 Chrome浏览器 为例子， 按 Ctrl + Shift + I 打开 Chrome 的开发人员工具。 点击开发人员工具右上方的“…”按钮，选择“More Tools”、“Network conditions”。如下图 反选 “Select automatically” 选择 Safari - Mac 不要关闭 Chrome 的开发人员工具，刷新网页，这时就可以直接在这个网站里下载 ISO 文件了。 选择 “Windows 10”，而不是 “Windows 10家庭中文版” 理由：虽说大多数人买来的电脑预装的 Windows 10都是家庭中文版的，但是这种家庭版是独具“中国特色”的，与国际版的不同是，不能在设置里面修改系统显示语言，只能是中文，至于其他差别倒是没注意啦。除此之外，不选”Windows 10家庭中文版”还有一部分原因是因为有些电脑预装的系统不是家庭版的，比如说专业版或者企业版，考虑到这种情况，所以统一选择”Windows 10”。 123456**注意** 下载 &quot;Windows 10&quot; 的用户，在启动的时候有家庭版，专业版，单语言版等提供选择。具体选择应该是根据你电脑预装的系统来选择，这样系统才会自动激活。安装了错误版本的系统将无法自动激活。打个比方，我电脑预装的是 &quot;Windows 10 家庭中文版&quot;，如果我安装的时候选择的是&quot;家庭版&quot;，那么开机联网后Windows 就会自动激活，但如果选错了，如&quot;专业版&quot;，&quot;单语言版&quot;等非&quot;家庭版&quot;的开机联网都不会激活的。 选完之后点击“确定” 选择“简体中文”，确定就好了，（当然你可以选择其他偏好的语言（家庭中文版除外）） 这个时候就会有“32 bit” 和“64 bit”，根据自己实际情况选择即可。 选完后就开始下载了。 直到下载完毕就完成一大半了。 开始动手经过之前的备份和下载，现在终于可以开工了。Win + R ，输入diskpart，回车确认 1. 启动分区 经过了上述步骤后，打开我的电脑就出现了只有4 GB的那个分区，失去的那些空间到哪去了呢？不用着急，那是因为还没分配给将要新建的分区呢。我们先把之前下载好的 Windows 10 映像文件，通过解压缩软件（此处推荐简洁大方且开源的 7-zip）打开，解压到（提取至）U盘已建好的分区的根目录，解压（提取）完后，安装盘就算制作好了。重点来了，我们制作的好的U盘，启动分区制作好了，当然不想要与个人数据混在一块，乱七八糟的多不好啊，而且还说不定不小心弄错了东西安装盘就不能正常运转了呢。我们可以继续用 diskpart 将启动分区给隐藏了。比如说，在我的电脑中，我U盘新建的分区的盘符为H（说人话就是显示成H盘了） 通过diskpart输入 remove letter=H 即可删除盘符即可起到隐藏分区的作用。 2. 数据分区最后我们要把剩余空间全部分配给一个用于我们存储数据的分区 命令总结1234567891011list disk //显示本机的所有磁盘，以便正确操作目标磁盘list partition //显示选中磁盘的所有分区select disk 0 //选择 0 号磁盘select partition 1 //选择 1 号分区clean //清除选中磁盘上的所有分区（包括数据）create partition primary size=xxxx //创建主分区，容量为：xxxx MB active //将选中分区标记为活动分区（当该分区作为启动分区的时候才需要这个操作）format fs=文件系统 quick //快速格式化当前分区（自行选择合适的文件系统）remove letter=盘符 //移除选中分区的盘符create partition primary //将选中磁盘的未分配的所有空间用来创建主分区assign letter=盘符 //给选中分区分配盘符 完结~","categories":[{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/categories/Windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/tags/Windows/"},{"name":"diskpart","slug":"diskpart","permalink":"https://ericclose.github.io/tags/diskpart/"},{"name":"启动盘","slug":"启动盘","permalink":"https://ericclose.github.io/tags/%E5%90%AF%E5%8A%A8%E7%9B%98/"}]},{"title":"GitHub + Hexo 博客搭建","slug":"Github-Pages-with-Hexo","date":"2018-10-13T16:00:00.000Z","updated":"2020-09-29T09:54:29.487Z","comments":true,"path":"Github-Pages-with-Hexo.html","link":"","permalink":"https://ericclose.github.io/Github-Pages-with-Hexo.html","excerpt":"此文介绍了搭建 Hexo 博客的全过程。然而在安装前，您必须检查电脑中是否已安装下列应用程序","text":"此文介绍了搭建 Hexo 博客的全过程。然而在安装前，您必须检查电脑中是否已安装下列应用程序 必备应用 Node.js 首先下载最新的 LTS（长期支持版）的 Node.js，除了安装路径自选外，其它选项全部默认，一路点击 Next 即可。最后安装好之后，cmd 输入 node -v，如果出现版本号，那么就安装成功了。 Git 除了安装路径自选外，有一步我们要确保勾选 Git Bash Here，取消 Git GUI Here 的选项，其余选项默认，一路点击 Next，安装完后就可以直接在鼠标右键菜单选项里打开 Git Bash 了。可以在 Git Bash 输入 git --version 验证是否安装成功 yarn 点此 下载 yarn 的安装包，安装即可。（在安装 yarn 之前请先确保您已经安装过 Node.js）除了安装路径自选外，其余安装选项默认即可。可以在 Git Bash 输入 yarn -v 验证是否安装成功 本教程假定你已经安装上述必备程序。这里我还想说一句，很多教程是用 npm 包管理器来安装依赖的，我这里则是用的 yarn，yarn 和 npm 相比有很多优势，更多详情和 npm 命令之间的差异建议自行去网上搜索。 Hexo 安装及建站过程 全局安装 Hexo（在 cmd 输入） 1yarn global add hexo-cli 配置环境变量 桌面上的「此电脑」图标，鼠标右键，「属性」，「高级系统设置」，「环境变量」，在「系统变量」一栏的「Path」，点击「编辑」，「新建」，把路径 C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\Yarn\\bin 写进去（此处路径取决于你电脑的用户名），保存即可。 找个目录建立站点（在你认为合适的目录下鼠标右键，点击 Git Bash Here，下面的 your_blog_name 是自定义的，随你喜好设定），然后输入命令： 1234hexo init your_blog_namecd your_blog_nameyarnyarn add hexo-deployer-git 完成上述操作后接下来就该部署到 GitHub Pages 上了。 GitHub Pages 必备条件 拥有一个 GitHub 账号 如果还没有账号的自行 点击这里 注册创建一个名为 your_username.github.io 的 repository（此处的your_username指的是你的 GitHub 用户名） 配置 SSH 密钥配置 GitHub 的 SSH 密钥可以让本地 Git 项目与远程的 GitHub 建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与 GitHub 代码库同步。操作如下： 检查本地上是否已有 SSH 密钥打开 Git Bash，并运行： 1cd ~/.ssh 如果是 No such file or directory 的就是还没没有 SSH 密钥，如下 123Innovation@DESKTOP-0URF3TU MINGW64 /d/repositories$ cd ~/.sshbash: cd: /c/Users/Innovation/.ssh: No such file or directory 如果是成功切换了目录的就是已有 SSH 密钥的，如下 12345Innovation@DESKTOP-0URF3TU MINGW64 /d/repositories$ cd ~/.sshInnovation@DESKTOP-0URF3TU MINGW64 ~/.ssh$ 还没有 SSH 密钥看这里 首先打开 Git Bash，输入下列命令 12git config --global user.name &quot;your_username&quot;git config --global user.email &quot;your_email&quot; 上面命令中的 your_username 和 your_email 以你是实际 GitHub 用户名和注册时填写的邮箱地址即可。 创建一对新的 SSH 密钥，输入以下命令 1ssh-keygen -t rsa -C &quot;your_email&quot; 上面的 your_email 以你的邮箱地址替换即可 按回车确认key保存的路径 12Generating public&#x2F;private rsa key pair.Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;Innovation&#x2F;.ssh&#x2F;id_rsa): 此处直接回车即可 输入密码 此处建议不要设置密码，直接回车，不然每次你本地文件发生变化要部署到 GitHub 仓库的时候都要繁琐的输入密码 12Created directory &#39;&#x2F;c&#x2F;Users&#x2F;Innovation&#x2F;.ssh&#39;.Enter passphrase (empty for no passphrase): 确认密码 设置了密码的就输入密码再回车，没设置密码的回车键确认即可 1Enter same passphrase again: 输入完成之后，屏幕大致会显示如下信息： 1234Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 已有 SSH 密钥看这里 在 Git Bash 里显示你的 SSH 密钥 1cat ~/.ssh/id_rsa.pub 鼠标复制返回的内容 接着： 登陆 GitHub，进入你的 Settings 点击左栏的 SSH and GPG Keys 选项 选择 New SSH Key，在 Key 文本框里直接粘贴刚才复制的内容 Title 文本框可以不填，点击 Add SSH Key 就好了 测试 GitHub 的身份验证 输入下面的命令，看看设置是否成功，&#103;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d; 的部分不要修改： 1ssh -T git@github.com 如果大致是下面的反馈： 123The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes&#x2F;no)? 输入 yes 即可 然后反馈如下，那么就验证成功了 1Hi ericclose! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 修改 blog 的配置文件 打开你一开始创建的 blog 文件夹，用文本编辑器（推荐 vscode 或者是 Notepad++ 这类带语法高亮的编辑器）打开刚文件夹下的 _config.yml 文件，然后修改最后一块代码： _config.yml1234deploy: type: git repository: git@github.com:your_username/your_username.github.io.git branch: master 把上面的 your_username 改成你 GitHub 的用户名就完成了所有配置。 生成 public 文件夹并部署到你的 GitHub Pages在你 blog 根目录下鼠标右键，点击 Git Bash Here，输入 12hexo ghexo d 上面的 g 代表的是 generate（生成），d 代表的是 deploy（部署）命令可以简写成一行 hexo g -d 完成进入你的 GitHub Pages 看看效果了，链接是 https://your_username.github.io （your_username 用你的用户名替代即可） 默认的 Hexo 主题是 landscape，最初只有一篇文章，效果图如下：","categories":[{"name":"Blog","slug":"Blog","permalink":"https://ericclose.github.io/categories/Blog/"}],"tags":[{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://ericclose.github.io/tags/GitHub-Pages/"},{"name":"hexo","slug":"hexo","permalink":"https://ericclose.github.io/tags/hexo/"}]}],"categories":[{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/categories/Android/"},{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/categories/Linux/"},{"name":"Proxy","slug":"Proxy","permalink":"https://ericclose.github.io/categories/Proxy/"},{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/categories/Windows/"},{"name":"Router","slug":"Router","permalink":"https://ericclose.github.io/categories/Router/"},{"name":"Crack","slug":"Crack","permalink":"https://ericclose.github.io/categories/Crack/"},{"name":"VM","slug":"VM","permalink":"https://ericclose.github.io/categories/VM/"},{"name":"Tools","slug":"Tools","permalink":"https://ericclose.github.io/categories/Tools/"},{"name":"Blog","slug":"Blog","permalink":"https://ericclose.github.io/categories/Blog/"}],"tags":[{"name":"Google","slug":"Google","permalink":"https://ericclose.github.io/tags/Google/"},{"name":"破解","slug":"破解","permalink":"https://ericclose.github.io/tags/%E7%A0%B4%E8%A7%A3/"},{"name":"pixel","slug":"pixel","permalink":"https://ericclose.github.io/tags/pixel/"},{"name":"Pixel XL","slug":"Pixel-XL","permalink":"https://ericclose.github.io/tags/Pixel-XL/"},{"name":"sailfish","slug":"sailfish","permalink":"https://ericclose.github.io/tags/sailfish/"},{"name":"modem","slug":"modem","permalink":"https://ericclose.github.io/tags/modem/"},{"name":"电信","slug":"电信","permalink":"https://ericclose.github.io/tags/%E7%94%B5%E4%BF%A1/"},{"name":"运营商","slug":"运营商","permalink":"https://ericclose.github.io/tags/%E8%BF%90%E8%90%A5%E5%95%86/"},{"name":"crack","slug":"crack","permalink":"https://ericclose.github.io/tags/crack/"},{"name":"移植","slug":"移植","permalink":"https://ericclose.github.io/tags/%E7%A7%BB%E6%A4%8D/"},{"name":"Verizon","slug":"Verizon","permalink":"https://ericclose.github.io/tags/Verizon/"},{"name":"保修信息","slug":"保修信息","permalink":"https://ericclose.github.io/tags/%E4%BF%9D%E4%BF%AE%E4%BF%A1%E6%81%AF/"},{"name":"账户锁","slug":"账户锁","permalink":"https://ericclose.github.io/tags/%E8%B4%A6%E6%88%B7%E9%94%81/"},{"name":"FRP","slug":"FRP","permalink":"https://ericclose.github.io/tags/FRP/"},{"name":"开机向导","slug":"开机向导","permalink":"https://ericclose.github.io/tags/%E5%BC%80%E6%9C%BA%E5%90%91%E5%AF%BC/"},{"name":"验证","slug":"验证","permalink":"https://ericclose.github.io/tags/%E9%AA%8C%E8%AF%81/"},{"name":"向导","slug":"向导","permalink":"https://ericclose.github.io/tags/%E5%90%91%E5%AF%BC/"},{"name":"小米","slug":"小米","permalink":"https://ericclose.github.io/tags/%E5%B0%8F%E7%B1%B3/"},{"name":"sagit","slug":"sagit","permalink":"https://ericclose.github.io/tags/sagit/"},{"name":"LineageOS","slug":"LineageOS","permalink":"https://ericclose.github.io/tags/LineageOS/"},{"name":"Linux","slug":"Linux","permalink":"https://ericclose.github.io/tags/Linux/"},{"name":"触控板","slug":"触控板","permalink":"https://ericclose.github.io/tags/%E8%A7%A6%E6%8E%A7%E6%9D%BF/"},{"name":"KDE","slug":"KDE","permalink":"https://ericclose.github.io/tags/KDE/"},{"name":"代理","slug":"代理","permalink":"https://ericclose.github.io/tags/%E4%BB%A3%E7%90%86/"},{"name":"Git","slug":"Git","permalink":"https://ericclose.github.io/tags/Git/"},{"name":"仓库","slug":"仓库","permalink":"https://ericclose.github.io/tags/%E4%BB%93%E5%BA%93/"},{"name":"http","slug":"http","permalink":"https://ericclose.github.io/tags/http/"},{"name":"https","slug":"https","permalink":"https://ericclose.github.io/tags/https/"},{"name":"ssh","slug":"ssh","permalink":"https://ericclose.github.io/tags/ssh/"},{"name":"激活","slug":"激活","permalink":"https://ericclose.github.io/tags/%E6%BF%80%E6%B4%BB/"},{"name":"Windows","slug":"Windows","permalink":"https://ericclose.github.io/tags/Windows/"},{"name":"刷机","slug":"刷机","permalink":"https://ericclose.github.io/tags/%E5%88%B7%E6%9C%BA/"},{"name":"固件","slug":"固件","permalink":"https://ericclose.github.io/tags/%E5%9B%BA%E4%BB%B6/"},{"name":"竞斗云","slug":"竞斗云","permalink":"https://ericclose.github.io/tags/%E7%AB%9E%E6%96%97%E4%BA%91/"},{"name":"R619AC","slug":"R619AC","permalink":"https://ericclose.github.io/tags/R619AC/"},{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://ericclose.github.io/tags/OpenWrt/"},{"name":"OpBoot","slug":"OpBoot","permalink":"https://ericclose.github.io/tags/OpBoot/"},{"name":"VMware","slug":"VMware","permalink":"https://ericclose.github.io/tags/VMware/"},{"name":"Arch","slug":"Arch","permalink":"https://ericclose.github.io/tags/Arch/"},{"name":"StarUML","slug":"StarUML","permalink":"https://ericclose.github.io/tags/StarUML/"},{"name":"Office","slug":"Office","permalink":"https://ericclose.github.io/tags/Office/"},{"name":"Visio","slug":"Visio","permalink":"https://ericclose.github.io/tags/Visio/"},{"name":"Fedora","slug":"Fedora","permalink":"https://ericclose.github.io/tags/Fedora/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://ericclose.github.io/tags/shadowsocks/"},{"name":"客户端","slug":"客户端","permalink":"https://ericclose.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"},{"name":"翻墙","slug":"翻墙","permalink":"https://ericclose.github.io/tags/%E7%BF%BB%E5%A2%99/"},{"name":"科学上网","slug":"科学上网","permalink":"https://ericclose.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"编译","slug":"编译","permalink":"https://ericclose.github.io/tags/%E7%BC%96%E8%AF%91/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://ericclose.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"macOS","slug":"macOS","permalink":"https://ericclose.github.io/tags/macOS/"},{"name":"CentOS","slug":"CentOS","permalink":"https://ericclose.github.io/tags/CentOS/"},{"name":"内核","slug":"内核","permalink":"https://ericclose.github.io/tags/%E5%86%85%E6%A0%B8/"},{"name":"Tor","slug":"Tor","permalink":"https://ericclose.github.io/tags/Tor/"},{"name":"斐讯","slug":"斐讯","permalink":"https://ericclose.github.io/tags/%E6%96%90%E8%AE%AF/"},{"name":"Phicomm","slug":"Phicomm","permalink":"https://ericclose.github.io/tags/Phicomm/"},{"name":"Padavan","slug":"Padavan","permalink":"https://ericclose.github.io/tags/Padavan/"},{"name":"BREED","slug":"BREED","permalink":"https://ericclose.github.io/tags/BREED/"},{"name":"类原生","slug":"类原生","permalink":"https://ericclose.github.io/tags/%E7%B1%BB%E5%8E%9F%E7%94%9F/"},{"name":"Android","slug":"Android","permalink":"https://ericclose.github.io/tags/Android/"},{"name":"you-get","slug":"you-get","permalink":"https://ericclose.github.io/tags/you-get/"},{"name":"下载","slug":"下载","permalink":"https://ericclose.github.io/tags/%E4%B8%8B%E8%BD%BD/"},{"name":"工具","slug":"工具","permalink":"https://ericclose.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Navicat","slug":"Navicat","permalink":"https://ericclose.github.io/tags/Navicat/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://ericclose.github.io/tags/JetBrains/"},{"name":"diskpart","slug":"diskpart","permalink":"https://ericclose.github.io/tags/diskpart/"},{"name":"启动盘","slug":"启动盘","permalink":"https://ericclose.github.io/tags/%E5%90%AF%E5%8A%A8%E7%9B%98/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://ericclose.github.io/tags/GitHub-Pages/"},{"name":"hexo","slug":"hexo","permalink":"https://ericclose.github.io/tags/hexo/"}]}